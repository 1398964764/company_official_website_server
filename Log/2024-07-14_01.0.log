01:00:01.719 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=443, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:00:06.727 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=444, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:00:11.730 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=445, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:00:13.952 [http-nio-8088-exec-17] INFO  c.c.l.MyServletRequestListener - session id为：null
01:00:13.952 [http-nio-8088-exec-17] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:00:13.956 [http-nio-8088-exec-17] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:00:13.962 [http-nio-8088-exec-17] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:00:13.962 [http-nio-8088-exec-17] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:00:13.963 [http-nio-8088-exec-17] INFO  c.c.l.MyServletRequestListener - request end
01:00:13.963 [http-nio-8088-exec-17] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:00:13.975 [http-nio-8088-exec-18] INFO  c.c.l.MyServletRequestListener - session id为：null
01:00:13.975 [http-nio-8088-exec-18] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:00:13.976 [http-nio-8088-exec-18] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:00:13.977 [http-nio-8088-exec-18] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:00:13.978 [http-nio-8088-exec-18] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:00:13.978 [http-nio-8088-exec-18] INFO  c.c.l.MyServletRequestListener - request end
01:00:13.978 [http-nio-8088-exec-18] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:00:13.987 [http-nio-8088-exec-20] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:00:13.987 [http-nio-8088-exec-20] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:00:13.990 [http-nio-8088-exec-20] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:00:14.051 [http-nio-8088-exec-20] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:00:14.053 [http-nio-8088-exec-20] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:00:14.053 [http-nio-8088-exec-20] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:00:14.053 [http-nio-8088-exec-20] INFO  c.c.l.MyServletRequestListener - request end
01:00:14.053 [http-nio-8088-exec-20] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:00:16.736 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=446, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:00:21.741 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=447, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:00:26.747 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=448, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:00:31.749 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=449, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:00:33.048 [http-nio-8088-exec-19] INFO  c.c.l.MyServletRequestListener - session id为：null
01:00:33.083 [http-nio-8088-exec-19] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:00:33.049 [http-nio-8088-exec-21] INFO  c.c.l.MyServletRequestListener - session id为：null
01:00:33.052 [http-nio-8088-exec-22] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:00:33.087 [http-nio-8088-exec-19] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:00:33.105 [http-nio-8088-exec-22] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:00:33.105 [http-nio-8088-exec-21] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:00:33.108 [http-nio-8088-exec-22] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:00:33.108 [http-nio-8088-exec-19] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:00:33.126 [http-nio-8088-exec-19] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:00:33.126 [http-nio-8088-exec-19] INFO  c.c.l.MyServletRequestListener - request end
01:00:33.126 [http-nio-8088-exec-19] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:00:33.127 [http-nio-8088-exec-21] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:00:33.128 [http-nio-8088-exec-21] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:00:33.129 [http-nio-8088-exec-21] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:00:33.129 [http-nio-8088-exec-21] INFO  c.c.l.MyServletRequestListener - request end
01:00:33.129 [http-nio-8088-exec-21] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:00:33.144 [http-nio-8088-exec-22] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:00:33.146 [http-nio-8088-exec-22] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:00:33.146 [http-nio-8088-exec-22] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:00:33.146 [http-nio-8088-exec-22] INFO  c.c.l.MyServletRequestListener - request end
01:00:33.146 [http-nio-8088-exec-22] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:00:36.752 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=450, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:00:38.410 [http-nio-8088-exec-24] INFO  c.c.l.MyServletRequestListener - session id为：null
01:00:38.410 [http-nio-8088-exec-24] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:00:38.424 [http-nio-8088-exec-23] INFO  c.c.l.MyServletRequestListener - session id为：null
01:00:38.424 [http-nio-8088-exec-23] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:00:38.424 [http-nio-8088-exec-24] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:00:38.426 [http-nio-8088-exec-23] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:00:38.427 [http-nio-8088-exec-25] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:00:38.427 [http-nio-8088-exec-25] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:00:38.428 [http-nio-8088-exec-24] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:00:38.428 [http-nio-8088-exec-24] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:00:38.428 [http-nio-8088-exec-24] INFO  c.c.l.MyServletRequestListener - request end
01:00:38.428 [http-nio-8088-exec-24] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:00:38.429 [http-nio-8088-exec-23] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:00:38.429 [http-nio-8088-exec-23] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:00:38.429 [http-nio-8088-exec-23] INFO  c.c.l.MyServletRequestListener - request end
01:00:38.429 [http-nio-8088-exec-23] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:00:38.431 [http-nio-8088-exec-25] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:00:38.454 [http-nio-8088-exec-25] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:00:38.456 [http-nio-8088-exec-25] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:00:38.456 [http-nio-8088-exec-25] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:00:38.456 [http-nio-8088-exec-25] INFO  c.c.l.MyServletRequestListener - request end
01:00:38.456 [http-nio-8088-exec-25] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:00:41.755 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=451, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:00:46.761 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=452, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:00:51.766 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=453, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:00:56.773 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=454, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:00:59.169 [http-nio-8088-exec-26] INFO  c.c.l.MyServletRequestListener - session id为：null
01:00:59.169 [http-nio-8088-exec-26] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:00:59.170 [http-nio-8088-exec-26] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:00:59.172 [http-nio-8088-exec-26] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:00:59.172 [http-nio-8088-exec-26] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:00:59.172 [http-nio-8088-exec-26] INFO  c.c.l.MyServletRequestListener - request end
01:00:59.172 [http-nio-8088-exec-26] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:00:59.177 [http-nio-8088-exec-27] INFO  c.c.l.MyServletRequestListener - session id为：null
01:00:59.177 [http-nio-8088-exec-27] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:00:59.178 [http-nio-8088-exec-27] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:00:59.179 [http-nio-8088-exec-27] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:00:59.179 [http-nio-8088-exec-27] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:00:59.179 [http-nio-8088-exec-27] INFO  c.c.l.MyServletRequestListener - request end
01:00:59.179 [http-nio-8088-exec-27] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:00:59.186 [http-nio-8088-exec-28] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:00:59.186 [http-nio-8088-exec-28] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:00:59.188 [http-nio-8088-exec-28] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:00:59.201 [http-nio-8088-exec-28] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:00:59.203 [http-nio-8088-exec-28] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:00:59.203 [http-nio-8088-exec-28] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:00:59.203 [http-nio-8088-exec-28] INFO  c.c.l.MyServletRequestListener - request end
01:00:59.203 [http-nio-8088-exec-28] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:01:01.779 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=455, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:01:06.783 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=456, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:01:11.788 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=457, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:01:16.790 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=458, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:01:21.795 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=459, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:01:26.801 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=460, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:01:28.156 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:01:31.807 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=461, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:01:36.815 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=462, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:01:41.821 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=463, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:01:46.823 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=464, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:01:51.830 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=465, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:01:56.836 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=466, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:02:01.839 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=467, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:02:06.848 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=468, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:02:11.855 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=469, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:02:16.858 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=470, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:02:17.224 [http-nio-8088-exec-31] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:02:17.224 [http-nio-8088-exec-31] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/fileUpload/upload
01:02:17.239 [http-nio-8088-exec-31] INFO  c.c.l.MyServletRequestListener - request end
01:02:17.239 [http-nio-8088-exec-31] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:02:17.243 [http-nio-8088-exec-32] INFO  c.c.l.MyServletRequestListener - session id为：null
01:02:17.243 [http-nio-8088-exec-32] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/login
01:02:17.245 [http-nio-8088-exec-32] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:02:17.245 [http-nio-8088-exec-32] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:02:17.245 [http-nio-8088-exec-32] INFO  c.c.l.MyServletRequestListener - request end
01:02:17.245 [http-nio-8088-exec-32] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:02:21.864 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=471, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:02:26.869 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=472, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:02:28.667 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:02:31.874 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=473, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:02:36.880 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=474, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:02:38.312 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:02:41.883 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=475, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:02:46.890 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=476, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:02:48.593 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:02:51.896 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=477, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:02:56.899 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=478, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:03:01.904 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=479, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:03:06.008 [http-nio-8088-exec-33] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:03:06.009 [http-nio-8088-exec-33] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:03:06.012 [http-nio-8088-exec-33] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:03:06.042 [http-nio-8088-exec-33] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=14, name=示例商品12, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:29, createTime=2024-07-13 15:51:29, isAvailable=true, isDeleted=false), Product(id=15, name=示例商品13, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:32, createTime=2024-07-13 15:51:32, isAvailable=true, isDeleted=false), Product(id=16, name=示例商品14, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:35, createTime=2024-07-13 15:51:35, isAvailable=true, isDeleted=false)]}
01:03:06.044 [http-nio-8088-exec-33] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:03:06.044 [http-nio-8088-exec-33] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:03:06.044 [http-nio-8088-exec-33] INFO  c.c.l.MyServletRequestListener - request end
01:03:06.044 [http-nio-8088-exec-33] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:03:06.910 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=480, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:03:11.916 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=481, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:03:16.922 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=482, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:03:21.926 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=483, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:03:26.931 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=484, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:03:30.575 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:03:31.933 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=485, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:03:36.938 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=486, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:03:41.944 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=487, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:03:46.950 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=488, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:03:51.955 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=489, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:03:56.960 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=490, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:04:01.974 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=491, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:04:06.981 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=492, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:04:11.985 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=493, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:04:16.991 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=494, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:04:21.997 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=495, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:04:27.001 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=496, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:04:32.005 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=497, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:04:37.010 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=498, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:04:42.029 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=499, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:04:44.747 [http-nio-8088-exec-35] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:04:44.747 [http-nio-8088-exec-35] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:04:44.748 [http-nio-8088-exec-35] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:04:44.784 [http-nio-8088-exec-35] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:04:44.786 [http-nio-8088-exec-35] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:04:44.786 [http-nio-8088-exec-35] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:04:44.786 [http-nio-8088-exec-35] INFO  c.c.l.MyServletRequestListener - request end
01:04:44.786 [http-nio-8088-exec-35] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:04:47.034 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=500, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:04:52.040 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=501, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:04:56.047 [http-nio-8088-exec-36] INFO  c.c.l.MyServletRequestListener - session id为：null
01:04:56.049 [http-nio-8088-exec-36] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:04:56.050 [http-nio-8088-exec-36] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:04:56.052 [http-nio-8088-exec-37] INFO  c.c.l.MyServletRequestListener - session id为：null
01:04:56.052 [http-nio-8088-exec-37] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:04:56.053 [http-nio-8088-exec-37] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:04:56.056 [http-nio-8088-exec-36] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:04:56.056 [http-nio-8088-exec-36] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:04:56.057 [http-nio-8088-exec-36] INFO  c.c.l.MyServletRequestListener - request end
01:04:56.057 [http-nio-8088-exec-36] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:04:56.056 [http-nio-8088-exec-37] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:04:56.060 [http-nio-8088-exec-37] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:04:56.061 [http-nio-8088-exec-37] INFO  c.c.l.MyServletRequestListener - request end
01:04:56.061 [http-nio-8088-exec-37] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:04:56.061 [http-nio-8088-exec-38] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:04:56.062 [http-nio-8088-exec-38] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:04:56.063 [http-nio-8088-exec-38] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:04:56.096 [http-nio-8088-exec-38] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:04:56.098 [http-nio-8088-exec-38] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:04:56.098 [http-nio-8088-exec-38] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:04:56.099 [http-nio-8088-exec-38] INFO  c.c.l.MyServletRequestListener - request end
01:04:56.099 [http-nio-8088-exec-38] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:04:57.045 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=502, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:05:02.050 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=503, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:05:05.087 [http-nio-8088-exec-39] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:05:05.087 [http-nio-8088-exec-39] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/fileUpload/upload
01:05:05.098 [http-nio-8088-exec-39] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：handleFileUpload，在该方法执行之前执行====
01:05:05.203 [http-nio-8088-exec-39] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:05:05.204 [http-nio-8088-exec-39] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:05:05.206 [http-nio-8088-exec-39] INFO  c.c.l.MyServletRequestListener - request end
01:05:05.206 [http-nio-8088-exec-39] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:05:07.060 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=504, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:05:09.182 [http-nio-8088-exec-40] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:05:09.183 [http-nio-8088-exec-40] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/fileUpload/upload
01:05:09.188 [http-nio-8088-exec-40] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：handleFileUpload，在该方法执行之前执行====
01:05:09.189 [http-nio-8088-exec-40] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:05:09.189 [http-nio-8088-exec-40] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:05:09.190 [http-nio-8088-exec-40] INFO  c.c.l.MyServletRequestListener - request end
01:05:09.190 [http-nio-8088-exec-40] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:05:09.212 [http-nio-8088-exec-41] INFO  c.c.l.MyServletRequestListener - session id为：null
01:05:09.212 [http-nio-8088-exec-41] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:05:09.213 [http-nio-8088-exec-41] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:05:09.214 [http-nio-8088-exec-41] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:05:09.214 [http-nio-8088-exec-41] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:05:09.215 [http-nio-8088-exec-41] INFO  c.c.l.MyServletRequestListener - request end
01:05:09.215 [http-nio-8088-exec-41] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:05:11.950 [http-nio-8088-exec-42] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:05:11.950 [http-nio-8088-exec-42] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/fileUpload/upload
01:05:11.954 [http-nio-8088-exec-42] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：handleFileUpload，在该方法执行之前执行====
01:05:11.956 [http-nio-8088-exec-42] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:05:11.956 [http-nio-8088-exec-42] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:05:11.956 [http-nio-8088-exec-42] INFO  c.c.l.MyServletRequestListener - request end
01:05:11.956 [http-nio-8088-exec-42] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:05:11.978 [http-nio-8088-exec-43] INFO  c.c.l.MyServletRequestListener - session id为：null
01:05:11.978 [http-nio-8088-exec-43] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:05:11.979 [http-nio-8088-exec-43] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:05:11.980 [http-nio-8088-exec-43] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:05:11.980 [http-nio-8088-exec-43] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:05:11.980 [http-nio-8088-exec-43] INFO  c.c.l.MyServletRequestListener - request end
01:05:11.980 [http-nio-8088-exec-43] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:05:12.064 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=505, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:05:17.068 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=506, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:05:22.074 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=507, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:05:27.079 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=508, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:05:32.083 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=509, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:05:33.057 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:05:37.089 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=510, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:05:42.094 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=511, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:05:47.100 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=512, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:05:52.105 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=513, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:05:57.112 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=514, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:06:02.117 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=515, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:06:07.127 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=516, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:06:12.128 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=517, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:06:15.732 [http-nio-8088-exec-46] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:06:15.732 [http-nio-8088-exec-48] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:06:15.732 [http-nio-8088-exec-47] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:06:15.733 [http-nio-8088-exec-47] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:06:15.732 [http-nio-8088-exec-46] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:06:15.732 [http-nio-8088-exec-48] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:06:15.736 [http-nio-8088-exec-47] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:06:15.736 [http-nio-8088-exec-48] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:06:15.736 [http-nio-8088-exec-46] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:06:15.874 [http-nio-8088-exec-48] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:06:15.872 [http-nio-8088-exec-46] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:06:15.874 [http-nio-8088-exec-47] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:06:15.876 [http-nio-8088-exec-47] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:06:15.876 [http-nio-8088-exec-47] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:06:15.876 [http-nio-8088-exec-47] INFO  c.c.l.MyServletRequestListener - request end
01:06:15.876 [http-nio-8088-exec-47] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:06:15.880 [http-nio-8088-exec-48] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:06:15.880 [http-nio-8088-exec-48] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:06:15.880 [http-nio-8088-exec-48] INFO  c.c.l.MyServletRequestListener - request end
01:06:15.880 [http-nio-8088-exec-48] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:06:15.883 [http-nio-8088-exec-46] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:06:15.883 [http-nio-8088-exec-46] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:06:15.883 [http-nio-8088-exec-46] INFO  c.c.l.MyServletRequestListener - request end
01:06:15.884 [http-nio-8088-exec-46] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:06:17.134 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=518, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:06:22.139 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=519, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:06:27.145 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=520, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:06:32.151 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=521, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:06:37.158 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=522, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:06:42.192 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=523, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:06:47.199 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=524, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:06:52.204 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=525, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:06:57.205 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=526, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:07:02.211 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=527, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:07:07.219 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=528, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:07:11.657 [http-nio-8088-exec-49] INFO  c.c.l.MyServletRequestListener - session id为：null
01:07:11.657 [http-nio-8088-exec-50] INFO  c.c.l.MyServletRequestListener - session id为：null
01:07:11.658 [http-nio-8088-exec-50] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:07:11.658 [http-nio-8088-exec-49] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:07:11.677 [http-nio-8088-exec-52] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:07:11.679 [http-nio-8088-exec-52] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:07:11.681 [http-nio-8088-exec-49] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:07:11.681 [http-nio-8088-exec-50] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:07:11.689 [http-nio-8088-exec-53] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:07:11.689 [http-nio-8088-exec-51] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:07:11.689 [http-nio-8088-exec-53] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:07:11.689 [http-nio-8088-exec-51] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:07:11.694 [http-nio-8088-exec-50] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:11.694 [http-nio-8088-exec-50] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:11.694 [http-nio-8088-exec-49] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:11.695 [http-nio-8088-exec-49] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:11.697 [http-nio-8088-exec-49] INFO  c.c.l.MyServletRequestListener - request end
01:07:11.697 [http-nio-8088-exec-49] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:11.698 [http-nio-8088-exec-50] INFO  c.c.l.MyServletRequestListener - request end
01:07:11.698 [http-nio-8088-exec-50] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:11.701 [http-nio-8088-exec-52] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:07:11.701 [http-nio-8088-exec-53] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:07:11.701 [http-nio-8088-exec-51] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:07:11.795 [http-nio-8088-exec-53] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:07:11.795 [http-nio-8088-exec-52] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:07:11.803 [http-nio-8088-exec-52] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:11.803 [http-nio-8088-exec-52] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:11.803 [http-nio-8088-exec-53] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:11.803 [http-nio-8088-exec-53] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:11.800 [http-nio-8088-exec-51] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:07:11.803 [http-nio-8088-exec-52] INFO  c.c.l.MyServletRequestListener - request end
01:07:11.804 [http-nio-8088-exec-52] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:11.804 [http-nio-8088-exec-53] INFO  c.c.l.MyServletRequestListener - request end
01:07:11.804 [http-nio-8088-exec-53] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:11.809 [http-nio-8088-exec-51] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:11.809 [http-nio-8088-exec-51] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:11.809 [http-nio-8088-exec-51] INFO  c.c.l.MyServletRequestListener - request end
01:07:11.809 [http-nio-8088-exec-51] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:12.223 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=529, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:07:17.227 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=530, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:07:22.229 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=531, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:07:25.306 [http-nio-8088-exec-54] INFO  c.c.l.MyServletRequestListener - session id为：null
01:07:25.307 [http-nio-8088-exec-54] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:07:25.307 [http-nio-8088-exec-54] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:07:25.310 [http-nio-8088-exec-54] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:25.310 [http-nio-8088-exec-54] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:25.310 [http-nio-8088-exec-54] INFO  c.c.l.MyServletRequestListener - request end
01:07:25.310 [http-nio-8088-exec-54] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:25.311 [http-nio-8088-exec-55] INFO  c.c.l.MyServletRequestListener - session id为：null
01:07:25.318 [http-nio-8088-exec-55] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:07:25.320 [http-nio-8088-exec-55] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:07:25.323 [http-nio-8088-exec-55] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:25.325 [http-nio-8088-exec-55] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:25.325 [http-nio-8088-exec-55] INFO  c.c.l.MyServletRequestListener - request end
01:07:25.325 [http-nio-8088-exec-55] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:25.331 [http-nio-8088-exec-57] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:07:25.331 [http-nio-8088-exec-57] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:07:25.331 [http-nio-8088-exec-56] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:07:25.331 [http-nio-8088-exec-56] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:07:25.333 [http-nio-8088-exec-58] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:07:25.333 [http-nio-8088-exec-58] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:07:25.336 [http-nio-8088-exec-56] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:07:25.336 [http-nio-8088-exec-57] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:07:25.338 [http-nio-8088-exec-58] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:07:25.363 [http-nio-8088-exec-58] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:07:25.365 [http-nio-8088-exec-58] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:25.366 [http-nio-8088-exec-58] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:25.366 [http-nio-8088-exec-58] INFO  c.c.l.MyServletRequestListener - request end
01:07:25.366 [http-nio-8088-exec-58] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:25.372 [http-nio-8088-exec-57] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:07:25.375 [http-nio-8088-exec-57] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:25.375 [http-nio-8088-exec-57] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:25.381 [http-nio-8088-exec-57] INFO  c.c.l.MyServletRequestListener - request end
01:07:25.382 [http-nio-8088-exec-57] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:25.402 [http-nio-8088-exec-56] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:07:25.405 [http-nio-8088-exec-56] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:25.405 [http-nio-8088-exec-56] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:25.405 [http-nio-8088-exec-56] INFO  c.c.l.MyServletRequestListener - request end
01:07:25.405 [http-nio-8088-exec-56] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:27.235 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=532, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:07:28.807 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:07:31.151 [http-nio-8088-exec-59] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:07:31.151 [http-nio-8088-exec-59] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/searchProductsByName
01:07:31.153 [http-nio-8088-exec-59] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：searchProductsByName，在该方法执行之前执行====
01:07:31.170 [http-nio-8088-exec-59] INFO  c.c.c.common.ProductController - 搜索商品名称: 
01:07:31.172 [http-nio-8088-exec-59] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:31.172 [http-nio-8088-exec-59] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:31.172 [http-nio-8088-exec-59] INFO  c.c.l.MyServletRequestListener - request end
01:07:31.173 [http-nio-8088-exec-59] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:32.239 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=533, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:07:35.773 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:07:37.247 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=534, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:07:38.347 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:07:40.782 [http-nio-8088-exec-60] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:07:40.783 [http-nio-8088-exec-60] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/searchProductsByName
01:07:40.785 [http-nio-8088-exec-60] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：searchProductsByName，在该方法执行之前执行====
01:07:40.800 [http-nio-8088-exec-60] INFO  c.c.c.common.ProductController - 搜索商品名称: 
01:07:40.801 [http-nio-8088-exec-60] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:40.802 [http-nio-8088-exec-60] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:40.802 [http-nio-8088-exec-60] INFO  c.c.l.MyServletRequestListener - request end
01:07:40.802 [http-nio-8088-exec-60] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:42.252 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=535, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:07:47.257 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=536, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:07:48.723 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:07:50.604 [http-nio-8088-exec-61] INFO  c.c.l.MyServletRequestListener - session id为：null
01:07:50.604 [http-nio-8088-exec-61] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:07:50.605 [http-nio-8088-exec-61] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:07:50.607 [http-nio-8088-exec-61] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:50.607 [http-nio-8088-exec-61] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:50.607 [http-nio-8088-exec-61] INFO  c.c.l.MyServletRequestListener - request end
01:07:50.607 [http-nio-8088-exec-61] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:50.609 [http-nio-8088-exec-62] INFO  c.c.l.MyServletRequestListener - session id为：null
01:07:50.610 [http-nio-8088-exec-62] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:07:50.611 [http-nio-8088-exec-62] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:07:50.613 [http-nio-8088-exec-62] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:50.614 [http-nio-8088-exec-62] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:50.614 [http-nio-8088-exec-62] INFO  c.c.l.MyServletRequestListener - request end
01:07:50.614 [http-nio-8088-exec-62] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:50.620 [http-nio-8088-exec-64] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:07:50.620 [http-nio-8088-exec-64] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:07:50.620 [http-nio-8088-exec-63] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:07:50.620 [http-nio-8088-exec-63] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:07:50.623 [http-nio-8088-exec-63] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:07:50.620 [http-nio-8088-exec-65] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:07:50.623 [http-nio-8088-exec-65] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:07:50.626 [http-nio-8088-exec-64] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:07:50.628 [http-nio-8088-exec-65] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:07:50.657 [http-nio-8088-exec-65] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:07:50.657 [http-nio-8088-exec-64] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:07:50.658 [http-nio-8088-exec-65] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:50.658 [http-nio-8088-exec-64] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:50.658 [http-nio-8088-exec-64] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:50.658 [http-nio-8088-exec-64] INFO  c.c.l.MyServletRequestListener - request end
01:07:50.658 [http-nio-8088-exec-64] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:50.658 [http-nio-8088-exec-65] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:50.659 [http-nio-8088-exec-65] INFO  c.c.l.MyServletRequestListener - request end
01:07:50.659 [http-nio-8088-exec-65] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:50.684 [http-nio-8088-exec-63] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:07:50.693 [http-nio-8088-exec-63] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:07:50.694 [http-nio-8088-exec-63] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:07:50.694 [http-nio-8088-exec-63] INFO  c.c.l.MyServletRequestListener - request end
01:07:50.694 [http-nio-8088-exec-63] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:07:52.263 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=537, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:07:57.268 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=538, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:08:02.293 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=539, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:08:07.297 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=540, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:08:07.818 [http-nio-8088-exec-66] INFO  c.c.l.MyServletRequestListener - session id为：null
01:08:07.818 [http-nio-8088-exec-67] INFO  c.c.l.MyServletRequestListener - session id为：null
01:08:07.821 [http-nio-8088-exec-67] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:08:07.821 [http-nio-8088-exec-66] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:08:07.823 [http-nio-8088-exec-66] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:08:07.823 [http-nio-8088-exec-67] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:08:07.824 [http-nio-8088-exec-68] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:08:07.824 [http-nio-8088-exec-68] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:08:07.827 [http-nio-8088-exec-66] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:07.827 [http-nio-8088-exec-66] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:07.827 [http-nio-8088-exec-66] INFO  c.c.l.MyServletRequestListener - request end
01:08:07.827 [http-nio-8088-exec-66] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:07.830 [http-nio-8088-exec-67] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:07.832 [http-nio-8088-exec-67] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:07.832 [http-nio-8088-exec-67] INFO  c.c.l.MyServletRequestListener - request end
01:08:07.832 [http-nio-8088-exec-67] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:07.832 [http-nio-8088-exec-67] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:08:07.832 [http-nio-8088-exec-67] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:08:07.834 [http-nio-8088-exec-68] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:08:07.836 [http-nio-8088-exec-69] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:08:07.838 [http-nio-8088-exec-69] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:08:07.841 [http-nio-8088-exec-67] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:08:07.842 [http-nio-8088-exec-69] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:08:07.866 [http-nio-8088-exec-69] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:08:07.866 [http-nio-8088-exec-67] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:08:07.867 [http-nio-8088-exec-69] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:07.867 [http-nio-8088-exec-69] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:07.867 [http-nio-8088-exec-69] INFO  c.c.l.MyServletRequestListener - request end
01:08:07.868 [http-nio-8088-exec-67] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:07.868 [http-nio-8088-exec-69] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:07.868 [http-nio-8088-exec-67] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:07.869 [http-nio-8088-exec-67] INFO  c.c.l.MyServletRequestListener - request end
01:08:07.870 [http-nio-8088-exec-67] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:07.897 [http-nio-8088-exec-68] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:08:08.058 [http-nio-8088-exec-68] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:08.060 [http-nio-8088-exec-68] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:08.062 [http-nio-8088-exec-68] INFO  c.c.l.MyServletRequestListener - request end
01:08:08.063 [http-nio-8088-exec-68] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:12.303 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=541, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:08:16.408 [http-nio-8088-exec-71] INFO  c.c.l.MyServletRequestListener - session id为：null
01:08:16.408 [http-nio-8088-exec-71] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:08:16.410 [http-nio-8088-exec-71] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:08:16.413 [http-nio-8088-exec-72] INFO  c.c.l.MyServletRequestListener - session id为：null
01:08:16.414 [http-nio-8088-exec-72] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:08:16.415 [http-nio-8088-exec-71] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:16.416 [http-nio-8088-exec-71] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:16.416 [http-nio-8088-exec-72] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:08:16.417 [http-nio-8088-exec-71] INFO  c.c.l.MyServletRequestListener - request end
01:08:16.417 [http-nio-8088-exec-71] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:16.420 [http-nio-8088-exec-72] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:16.420 [http-nio-8088-exec-72] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:16.420 [http-nio-8088-exec-72] INFO  c.c.l.MyServletRequestListener - request end
01:08:16.420 [http-nio-8088-exec-72] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:16.426 [http-nio-8088-exec-73] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:08:16.426 [http-nio-8088-exec-74] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:08:16.426 [http-nio-8088-exec-73] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:08:16.426 [http-nio-8088-exec-74] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:08:16.429 [http-nio-8088-exec-73] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:08:16.429 [http-nio-8088-exec-75] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:08:16.429 [http-nio-8088-exec-74] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:08:16.429 [http-nio-8088-exec-75] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:08:16.430 [http-nio-8088-exec-75] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:08:16.453 [http-nio-8088-exec-75] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:08:16.453 [http-nio-8088-exec-74] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:08:16.453 [http-nio-8088-exec-75] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:16.453 [http-nio-8088-exec-74] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:16.453 [http-nio-8088-exec-75] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:16.454 [http-nio-8088-exec-74] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:16.454 [http-nio-8088-exec-75] INFO  c.c.l.MyServletRequestListener - request end
01:08:16.454 [http-nio-8088-exec-74] INFO  c.c.l.MyServletRequestListener - request end
01:08:16.454 [http-nio-8088-exec-75] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:16.454 [http-nio-8088-exec-74] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:16.464 [http-nio-8088-exec-73] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:08:16.465 [http-nio-8088-exec-73] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:16.465 [http-nio-8088-exec-73] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:16.465 [http-nio-8088-exec-73] INFO  c.c.l.MyServletRequestListener - request end
01:08:16.465 [http-nio-8088-exec-73] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:17.309 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=542, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:08:22.373 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=543, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:08:25.188 [http-nio-8088-exec-78] INFO  c.c.l.MyServletRequestListener - session id为：null
01:08:25.188 [http-nio-8088-exec-78] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:08:25.189 [http-nio-8088-exec-78] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:08:25.190 [http-nio-8088-exec-78] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:25.190 [http-nio-8088-exec-78] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:25.190 [http-nio-8088-exec-78] INFO  c.c.l.MyServletRequestListener - request end
01:08:25.190 [http-nio-8088-exec-78] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:25.195 [http-nio-8088-exec-76] INFO  c.c.l.MyServletRequestListener - session id为：null
01:08:25.196 [http-nio-8088-exec-76] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:08:25.196 [http-nio-8088-exec-76] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:08:25.197 [http-nio-8088-exec-76] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:25.198 [http-nio-8088-exec-76] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:25.198 [http-nio-8088-exec-76] INFO  c.c.l.MyServletRequestListener - request end
01:08:25.198 [http-nio-8088-exec-76] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:25.206 [http-nio-8088-exec-79] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:08:25.207 [http-nio-8088-exec-79] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:08:25.208 [http-nio-8088-exec-81] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:08:25.208 [http-nio-8088-exec-77] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:08:25.208 [http-nio-8088-exec-81] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:08:25.208 [http-nio-8088-exec-77] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:08:25.209 [http-nio-8088-exec-79] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:08:25.210 [http-nio-8088-exec-77] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:08:25.210 [http-nio-8088-exec-81] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:08:25.230 [http-nio-8088-exec-81] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:08:25.231 [http-nio-8088-exec-81] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:25.231 [http-nio-8088-exec-81] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:25.232 [http-nio-8088-exec-81] INFO  c.c.l.MyServletRequestListener - request end
01:08:25.232 [http-nio-8088-exec-81] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:25.236 [http-nio-8088-exec-77] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:08:25.237 [http-nio-8088-exec-79] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:08:25.238 [http-nio-8088-exec-77] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:25.238 [http-nio-8088-exec-77] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:25.238 [http-nio-8088-exec-77] INFO  c.c.l.MyServletRequestListener - request end
01:08:25.238 [http-nio-8088-exec-77] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:25.239 [http-nio-8088-exec-79] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:08:25.239 [http-nio-8088-exec-79] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:08:25.239 [http-nio-8088-exec-79] INFO  c.c.l.MyServletRequestListener - request end
01:08:25.239 [http-nio-8088-exec-79] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:08:27.378 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=544, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:08:32.382 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=545, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:08:37.389 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=546, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:08:42.394 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=547, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:08:47.397 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=548, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:08:52.404 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=549, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:08:57.405 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=550, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:09:02.410 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=551, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:09:07.415 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=552, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:09:12.420 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=553, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:09:17.423 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=554, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:09:22.426 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=555, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:09:27.431 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=556, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:09:32.436 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=557, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:09:37.444 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=558, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:09:38.215 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:09:42.448 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=559, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:09:47.453 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=560, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:09:52.459 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=561, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:09:57.465 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=562, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:10:02.472 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=563, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:10:07.479 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=564, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:10:12.108 [http-nio-8088-exec-82] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:10:12.109 [http-nio-8088-exec-82] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:10:12.111 [http-nio-8088-exec-82] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:10:12.142 [http-nio-8088-exec-82] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=14, name=示例商品12, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:29, createTime=2024-07-13 15:51:29, isAvailable=true, isDeleted=false), Product(id=15, name=示例商品13, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:32, createTime=2024-07-13 15:51:32, isAvailable=true, isDeleted=false), Product(id=16, name=示例商品14, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:35, createTime=2024-07-13 15:51:35, isAvailable=true, isDeleted=false)]}
01:10:12.143 [http-nio-8088-exec-82] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:10:12.143 [http-nio-8088-exec-82] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:10:12.144 [http-nio-8088-exec-82] INFO  c.c.l.MyServletRequestListener - request end
01:10:12.144 [http-nio-8088-exec-82] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:10:12.507 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=565, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:10:17.513 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=566, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:10:22.518 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=567, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:10:27.523 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=568, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:10:32.527 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=569, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:10:37.534 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=570, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:10:42.541 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=571, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:10:47.542 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=572, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:10:52.544 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=573, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:10:57.550 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=574, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:11:02.552 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=575, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:11:07.553 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=576, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:11:12.556 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=577, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:11:17.557 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=578, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:11:22.561 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=579, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:11:27.566 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=580, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:11:32.570 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=581, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:11:37.572 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=582, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:11:40.584 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:11:42.577 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=583, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:11:47.580 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=584, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:11:52.584 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=585, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:11:57.589 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=586, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:12:02.591 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=587, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:12:07.595 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=588, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:12:12.601 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=589, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:12:17.609 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=590, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:12:22.613 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=591, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:12:27.617 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=592, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:12:28.854 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:12:32.623 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=593, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:12:37.636 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=594, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:12:38.322 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:12:42.642 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=595, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:12:47.652 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=596, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:12:48.689 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:12:49.403 [http-nio-8088-exec-84] INFO  c.c.l.MyServletRequestListener - session id为：null
01:12:49.403 [http-nio-8088-exec-84] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:12:49.405 [http-nio-8088-exec-84] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:12:49.407 [http-nio-8088-exec-84] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:12:49.407 [http-nio-8088-exec-84] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:12:49.407 [http-nio-8088-exec-84] INFO  c.c.l.MyServletRequestListener - request end
01:12:49.407 [http-nio-8088-exec-84] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:12:49.453 [http-nio-8088-exec-85] INFO  c.c.l.MyServletRequestListener - session id为：null
01:12:49.453 [http-nio-8088-exec-85] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:12:49.454 [http-nio-8088-exec-85] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:12:49.456 [http-nio-8088-exec-85] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:12:49.457 [http-nio-8088-exec-85] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:12:49.457 [http-nio-8088-exec-85] INFO  c.c.l.MyServletRequestListener - request end
01:12:49.457 [http-nio-8088-exec-85] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:12:49.465 [http-nio-8088-exec-86] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:12:49.465 [http-nio-8088-exec-86] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:12:49.467 [http-nio-8088-exec-87] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:12:49.467 [http-nio-8088-exec-87] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:12:49.468 [http-nio-8088-exec-86] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:12:49.469 [http-nio-8088-exec-87] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:12:49.475 [http-nio-8088-exec-88] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:12:49.475 [http-nio-8088-exec-88] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:12:49.478 [http-nio-8088-exec-88] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:12:49.486 [http-nio-8088-exec-87] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:12:49.487 [http-nio-8088-exec-87] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:12:49.488 [http-nio-8088-exec-87] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:12:49.488 [http-nio-8088-exec-87] INFO  c.c.l.MyServletRequestListener - request end
01:12:49.488 [http-nio-8088-exec-87] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:12:49.496 [http-nio-8088-exec-88] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:12:49.497 [http-nio-8088-exec-88] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:12:49.497 [http-nio-8088-exec-88] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:12:49.496 [http-nio-8088-exec-86] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:12:49.497 [http-nio-8088-exec-88] INFO  c.c.l.MyServletRequestListener - request end
01:12:49.497 [http-nio-8088-exec-88] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:12:49.498 [http-nio-8088-exec-86] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:12:49.498 [http-nio-8088-exec-86] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:12:49.498 [http-nio-8088-exec-86] INFO  c.c.l.MyServletRequestListener - request end
01:12:49.498 [http-nio-8088-exec-86] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:12:52.658 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=597, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:12:54.409 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - session id为：null
01:12:54.412 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:12:54.414 [http-nio-8088-exec-89] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:12:54.415 [http-nio-8088-exec-89] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:12:54.415 [http-nio-8088-exec-89] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:12:54.415 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - request end
01:12:54.415 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:12:54.416 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - session id为：null
01:12:54.416 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:12:54.426 [http-nio-8088-exec-89] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:12:54.427 [http-nio-8088-exec-89] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:12:54.428 [http-nio-8088-exec-89] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:12:54.428 [http-nio-8088-exec-91] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:12:54.428 [http-nio-8088-exec-91] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:12:54.428 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - request end
01:12:54.428 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:12:54.428 [http-nio-8088-exec-92] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:12:54.429 [http-nio-8088-exec-92] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:12:54.429 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:12:54.429 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:12:54.432 [http-nio-8088-exec-91] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:12:54.431 [http-nio-8088-exec-89] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:12:54.434 [http-nio-8088-exec-92] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:12:54.450 [http-nio-8088-exec-92] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:12:54.450 [http-nio-8088-exec-89] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:12:54.451 [http-nio-8088-exec-89] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:12:54.452 [http-nio-8088-exec-89] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:12:54.452 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - request end
01:12:54.452 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:12:54.451 [http-nio-8088-exec-92] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:12:54.452 [http-nio-8088-exec-92] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:12:54.452 [http-nio-8088-exec-92] INFO  c.c.l.MyServletRequestListener - request end
01:12:54.452 [http-nio-8088-exec-92] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:12:54.461 [http-nio-8088-exec-91] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:12:54.463 [http-nio-8088-exec-91] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:12:54.463 [http-nio-8088-exec-91] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:12:54.464 [http-nio-8088-exec-91] INFO  c.c.l.MyServletRequestListener - request end
01:12:54.464 [http-nio-8088-exec-91] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:12:57.660 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=598, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:13:02.662 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=599, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:13:07.672 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=600, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:13:12.676 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=601, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:13:17.680 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=602, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:13:18.792 [http-nio-8088-exec-94] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:13:18.792 [http-nio-8088-exec-94] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:13:18.795 [http-nio-8088-exec-96] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:13:18.795 [http-nio-8088-exec-96] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:13:18.796 [http-nio-8088-exec-96] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:13:18.794 [http-nio-8088-exec-94] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:13:18.797 [http-nio-8088-exec-95] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:13:18.797 [http-nio-8088-exec-95] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:13:18.798 [http-nio-8088-exec-95] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:13:18.887 [http-nio-8088-exec-94] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:13:18.886 [http-nio-8088-exec-95] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:13:18.887 [http-nio-8088-exec-94] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:13:18.887 [http-nio-8088-exec-94] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:13:18.888 [http-nio-8088-exec-94] INFO  c.c.l.MyServletRequestListener - request end
01:13:18.888 [http-nio-8088-exec-94] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:13:18.887 [http-nio-8088-exec-95] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:13:18.888 [http-nio-8088-exec-95] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:13:18.889 [http-nio-8088-exec-95] INFO  c.c.l.MyServletRequestListener - request end
01:13:18.889 [http-nio-8088-exec-95] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:13:18.896 [http-nio-8088-exec-96] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:13:18.910 [http-nio-8088-exec-96] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:13:18.911 [http-nio-8088-exec-96] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:13:18.911 [http-nio-8088-exec-96] INFO  c.c.l.MyServletRequestListener - request end
01:13:18.911 [http-nio-8088-exec-96] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:13:22.684 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=603, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:13:27.686 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=604, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:13:32.689 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=605, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:13:37.696 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=606, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:13:42.709 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=607, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:13:43.053 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:13:47.713 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=608, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:13:52.718 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=609, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:13:53.884 [http-nio-8088-exec-97] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:13:53.885 [http-nio-8088-exec-97] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/searchProductsByName
01:13:53.887 [http-nio-8088-exec-97] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：searchProductsByName，在该方法执行之前执行====
01:13:53.909 [http-nio-8088-exec-97] INFO  c.c.c.common.ProductController - 搜索商品名称: 
01:13:53.911 [http-nio-8088-exec-97] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:13:53.911 [http-nio-8088-exec-97] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:13:53.912 [http-nio-8088-exec-97] INFO  c.c.l.MyServletRequestListener - request end
01:13:53.912 [http-nio-8088-exec-97] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:13:56.452 [http-nio-8088-exec-100] INFO  c.c.l.MyServletRequestListener - session id为：null
01:13:56.452 [http-nio-8088-exec-100] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:13:56.453 [http-nio-8088-exec-100] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:13:56.455 [http-nio-8088-exec-100] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:13:56.456 [http-nio-8088-exec-100] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:13:56.456 [http-nio-8088-exec-100] INFO  c.c.l.MyServletRequestListener - request end
01:13:56.457 [http-nio-8088-exec-100] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:13:56.459 [http-nio-8088-exec-1] INFO  c.c.l.MyServletRequestListener - session id为：null
01:13:56.462 [http-nio-8088-exec-1] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:13:56.464 [http-nio-8088-exec-1] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:13:56.466 [http-nio-8088-exec-1] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:13:56.466 [http-nio-8088-exec-1] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:13:56.467 [http-nio-8088-exec-1] INFO  c.c.l.MyServletRequestListener - request end
01:13:56.467 [http-nio-8088-exec-1] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:13:56.478 [http-nio-8088-exec-2] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:13:56.479 [http-nio-8088-exec-2] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:13:56.480 [http-nio-8088-exec-3] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:13:56.481 [http-nio-8088-exec-3] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:13:56.481 [http-nio-8088-exec-6] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:13:56.481 [http-nio-8088-exec-6] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:13:56.482 [http-nio-8088-exec-2] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:13:56.487 [http-nio-8088-exec-6] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:13:56.487 [http-nio-8088-exec-3] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:13:56.516 [http-nio-8088-exec-6] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:13:56.516 [http-nio-8088-exec-2] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:13:56.518 [http-nio-8088-exec-6] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:13:56.518 [http-nio-8088-exec-6] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:13:56.518 [http-nio-8088-exec-6] INFO  c.c.l.MyServletRequestListener - request end
01:13:56.518 [http-nio-8088-exec-6] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:13:56.518 [http-nio-8088-exec-2] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:13:56.521 [http-nio-8088-exec-2] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:13:56.521 [http-nio-8088-exec-2] INFO  c.c.l.MyServletRequestListener - request end
01:13:56.521 [http-nio-8088-exec-2] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:13:56.538 [http-nio-8088-exec-3] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:13:56.541 [http-nio-8088-exec-3] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:13:56.542 [http-nio-8088-exec-3] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:13:56.542 [http-nio-8088-exec-3] INFO  c.c.l.MyServletRequestListener - request end
01:13:56.542 [http-nio-8088-exec-3] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:13:57.724 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=610, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:14:02.730 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=611, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:14:07.736 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=612, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:14:12.741 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=613, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:14:17.746 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=614, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:14:22.752 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=615, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:14:27.758 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=616, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:14:32.764 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=617, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:14:37.771 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=618, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:14:42.774 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=619, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:14:47.776 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=620, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:14:52.782 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=621, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:14:57.787 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=622, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:02.792 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=623, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:07.799 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=624, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:09.442 [http-nio-8088-exec-8] INFO  c.c.l.MyServletRequestListener - session id为：null
01:15:09.442 [http-nio-8088-exec-8] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:15:09.443 [http-nio-8088-exec-8] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:15:09.444 [http-nio-8088-exec-8] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:09.444 [http-nio-8088-exec-8] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:09.444 [http-nio-8088-exec-8] INFO  c.c.l.MyServletRequestListener - request end
01:15:09.444 [http-nio-8088-exec-8] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:09.452 [http-nio-8088-exec-9] INFO  c.c.l.MyServletRequestListener - session id为：null
01:15:09.452 [http-nio-8088-exec-9] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:15:09.453 [http-nio-8088-exec-9] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:15:09.454 [http-nio-8088-exec-9] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:09.454 [http-nio-8088-exec-9] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:09.454 [http-nio-8088-exec-9] INFO  c.c.l.MyServletRequestListener - request end
01:15:09.454 [http-nio-8088-exec-9] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:09.461 [http-nio-8088-exec-7] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:09.461 [http-nio-8088-exec-10] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:09.461 [http-nio-8088-exec-7] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:15:09.461 [http-nio-8088-exec-11] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:09.461 [http-nio-8088-exec-10] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:15:09.461 [http-nio-8088-exec-11] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:15:09.464 [http-nio-8088-exec-10] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:15:09.464 [http-nio-8088-exec-11] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:15:09.465 [http-nio-8088-exec-7] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:15:09.489 [http-nio-8088-exec-11] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:15:09.489 [http-nio-8088-exec-10] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:15:09.490 [http-nio-8088-exec-11] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:09.491 [http-nio-8088-exec-11] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:09.490 [http-nio-8088-exec-10] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:09.491 [http-nio-8088-exec-11] INFO  c.c.l.MyServletRequestListener - request end
01:15:09.491 [http-nio-8088-exec-10] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:09.491 [http-nio-8088-exec-11] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:09.492 [http-nio-8088-exec-10] INFO  c.c.l.MyServletRequestListener - request end
01:15:09.492 [http-nio-8088-exec-10] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:09.510 [http-nio-8088-exec-7] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:15:09.513 [http-nio-8088-exec-7] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:09.514 [http-nio-8088-exec-7] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:09.514 [http-nio-8088-exec-7] INFO  c.c.l.MyServletRequestListener - request end
01:15:09.514 [http-nio-8088-exec-7] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:12.691 [http-nio-8088-exec-13] INFO  c.c.l.MyServletRequestListener - session id为：null
01:15:12.691 [http-nio-8088-exec-13] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:15:12.698 [http-nio-8088-exec-13] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:15:12.698 [http-nio-8088-exec-12] INFO  c.c.l.MyServletRequestListener - session id为：null
01:15:12.698 [http-nio-8088-exec-12] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:15:12.702 [http-nio-8088-exec-13] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:12.702 [http-nio-8088-exec-12] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:15:12.702 [http-nio-8088-exec-13] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:12.702 [http-nio-8088-exec-13] INFO  c.c.l.MyServletRequestListener - request end
01:15:12.703 [http-nio-8088-exec-13] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:12.704 [http-nio-8088-exec-12] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:12.704 [http-nio-8088-exec-12] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:12.705 [http-nio-8088-exec-12] INFO  c.c.l.MyServletRequestListener - request end
01:15:12.705 [http-nio-8088-exec-12] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:12.711 [http-nio-8088-exec-14] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:12.711 [http-nio-8088-exec-15] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:12.711 [http-nio-8088-exec-16] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:12.712 [http-nio-8088-exec-16] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:15:12.711 [http-nio-8088-exec-14] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:15:12.712 [http-nio-8088-exec-15] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:15:12.715 [http-nio-8088-exec-15] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:15:12.715 [http-nio-8088-exec-16] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:15:12.715 [http-nio-8088-exec-14] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:15:12.743 [http-nio-8088-exec-15] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:15:12.745 [http-nio-8088-exec-15] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:12.745 [http-nio-8088-exec-15] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:12.746 [http-nio-8088-exec-15] INFO  c.c.l.MyServletRequestListener - request end
01:15:12.746 [http-nio-8088-exec-15] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:12.754 [http-nio-8088-exec-16] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:15:12.755 [http-nio-8088-exec-16] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:12.756 [http-nio-8088-exec-16] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:12.756 [http-nio-8088-exec-16] INFO  c.c.l.MyServletRequestListener - request end
01:15:12.756 [http-nio-8088-exec-16] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:12.768 [http-nio-8088-exec-14] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:15:12.770 [http-nio-8088-exec-14] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:12.770 [http-nio-8088-exec-14] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:12.770 [http-nio-8088-exec-14] INFO  c.c.l.MyServletRequestListener - request end
01:15:12.770 [http-nio-8088-exec-14] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:12.803 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=625, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:13.847 [http-nio-8088-exec-17] INFO  c.c.l.MyServletRequestListener - session id为：null
01:15:13.847 [http-nio-8088-exec-17] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:15:13.850 [http-nio-8088-exec-17] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:15:13.854 [http-nio-8088-exec-17] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:13.856 [http-nio-8088-exec-17] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:13.857 [http-nio-8088-exec-17] INFO  c.c.l.MyServletRequestListener - request end
01:15:13.857 [http-nio-8088-exec-18] INFO  c.c.l.MyServletRequestListener - session id为：null
01:15:13.857 [http-nio-8088-exec-17] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:13.857 [http-nio-8088-exec-18] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:15:13.860 [http-nio-8088-exec-18] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:15:13.860 [http-nio-8088-exec-18] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:13.861 [http-nio-8088-exec-18] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:13.861 [http-nio-8088-exec-18] INFO  c.c.l.MyServletRequestListener - request end
01:15:13.861 [http-nio-8088-exec-18] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:13.866 [http-nio-8088-exec-20] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:13.866 [http-nio-8088-exec-20] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:15:13.866 [http-nio-8088-exec-21] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:13.866 [http-nio-8088-exec-19] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:13.866 [http-nio-8088-exec-21] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:15:13.867 [http-nio-8088-exec-19] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:15:13.872 [http-nio-8088-exec-20] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:15:13.873 [http-nio-8088-exec-19] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:15:13.873 [http-nio-8088-exec-21] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:15:13.895 [http-nio-8088-exec-21] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:15:13.895 [http-nio-8088-exec-20] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:15:13.896 [http-nio-8088-exec-20] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:13.896 [http-nio-8088-exec-21] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:13.896 [http-nio-8088-exec-20] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:13.896 [http-nio-8088-exec-21] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:13.896 [http-nio-8088-exec-20] INFO  c.c.l.MyServletRequestListener - request end
01:15:13.896 [http-nio-8088-exec-21] INFO  c.c.l.MyServletRequestListener - request end
01:15:13.897 [http-nio-8088-exec-20] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:13.897 [http-nio-8088-exec-21] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:13.899 [http-nio-8088-exec-19] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:15:13.901 [http-nio-8088-exec-19] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:13.902 [http-nio-8088-exec-19] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:13.902 [http-nio-8088-exec-19] INFO  c.c.l.MyServletRequestListener - request end
01:15:13.902 [http-nio-8088-exec-19] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:14.784 [http-nio-8088-exec-22] INFO  c.c.l.MyServletRequestListener - session id为：null
01:15:14.784 [http-nio-8088-exec-22] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:15:14.786 [http-nio-8088-exec-22] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:15:14.790 [http-nio-8088-exec-22] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:14.792 [http-nio-8088-exec-24] INFO  c.c.l.MyServletRequestListener - session id为：null
01:15:14.793 [http-nio-8088-exec-22] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:14.793 [http-nio-8088-exec-24] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:15:14.793 [http-nio-8088-exec-22] INFO  c.c.l.MyServletRequestListener - request end
01:15:14.793 [http-nio-8088-exec-22] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:14.798 [http-nio-8088-exec-24] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:15:14.802 [http-nio-8088-exec-24] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:14.802 [http-nio-8088-exec-24] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:14.804 [http-nio-8088-exec-24] INFO  c.c.l.MyServletRequestListener - request end
01:15:14.804 [http-nio-8088-exec-24] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:14.806 [http-nio-8088-exec-25] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:14.807 [http-nio-8088-exec-25] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:15:14.806 [http-nio-8088-exec-23] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:14.807 [http-nio-8088-exec-23] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:15:14.813 [http-nio-8088-exec-25] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:15:14.813 [http-nio-8088-exec-23] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:15:14.813 [http-nio-8088-exec-26] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:14.814 [http-nio-8088-exec-26] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:15:14.816 [http-nio-8088-exec-26] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:15:14.836 [http-nio-8088-exec-26] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:15:14.836 [http-nio-8088-exec-25] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:15:14.837 [http-nio-8088-exec-25] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:14.837 [http-nio-8088-exec-25] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:14.837 [http-nio-8088-exec-26] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:14.837 [http-nio-8088-exec-26] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:14.837 [http-nio-8088-exec-26] INFO  c.c.l.MyServletRequestListener - request end
01:15:14.837 [http-nio-8088-exec-26] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:14.838 [http-nio-8088-exec-25] INFO  c.c.l.MyServletRequestListener - request end
01:15:14.838 [http-nio-8088-exec-25] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:14.850 [http-nio-8088-exec-23] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:15:14.852 [http-nio-8088-exec-23] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:14.852 [http-nio-8088-exec-23] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:14.852 [http-nio-8088-exec-23] INFO  c.c.l.MyServletRequestListener - request end
01:15:14.852 [http-nio-8088-exec-23] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:17.809 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=626, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:21.647 [http-nio-8088-exec-27] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:21.647 [http-nio-8088-exec-27] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/searchProductsByName
01:15:21.649 [http-nio-8088-exec-27] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：searchProductsByName，在该方法执行之前执行====
01:15:21.666 [http-nio-8088-exec-27] INFO  c.c.c.common.ProductController - 搜索商品名称: 
01:15:21.668 [http-nio-8088-exec-27] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:21.668 [http-nio-8088-exec-27] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:21.668 [http-nio-8088-exec-27] INFO  c.c.l.MyServletRequestListener - request end
01:15:21.669 [http-nio-8088-exec-27] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:22.811 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=627, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:27.813 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=628, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:32.817 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=629, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:37.822 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=630, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:40.572 [http-nio-8088-exec-28] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:40.572 [http-nio-8088-exec-28] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:15:40.574 [http-nio-8088-exec-28] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:15:40.593 [http-nio-8088-exec-28] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:15:40.594 [http-nio-8088-exec-28] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:40.595 [http-nio-8088-exec-28] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:40.595 [http-nio-8088-exec-28] INFO  c.c.l.MyServletRequestListener - request end
01:15:40.595 [http-nio-8088-exec-28] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:40.597 [http-nio-8088-exec-29] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:40.597 [http-nio-8088-exec-29] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:15:40.598 [http-nio-8088-exec-30] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:40.598 [http-nio-8088-exec-30] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:15:40.599 [http-nio-8088-exec-29] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:15:40.600 [http-nio-8088-exec-30] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:15:40.613 [http-nio-8088-exec-29] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:15:40.614 [http-nio-8088-exec-29] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:40.614 [http-nio-8088-exec-29] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:40.615 [http-nio-8088-exec-29] INFO  c.c.l.MyServletRequestListener - request end
01:15:40.615 [http-nio-8088-exec-29] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:40.618 [http-nio-8088-exec-30] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:15:40.618 [http-nio-8088-exec-30] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:40.618 [http-nio-8088-exec-30] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:40.618 [http-nio-8088-exec-30] INFO  c.c.l.MyServletRequestListener - request end
01:15:40.618 [http-nio-8088-exec-30] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:42.826 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=631, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:46.002 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: Unexpected end of file from server]]
01:15:47.280 [http-nio-8088-exec-31] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:47.280 [http-nio-8088-exec-31] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/searchProductsByName
01:15:47.282 [http-nio-8088-exec-31] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：searchProductsByName，在该方法执行之前执行====
01:15:47.305 [http-nio-8088-exec-31] INFO  c.c.c.common.ProductController - 搜索商品名称: 
01:15:47.306 [http-nio-8088-exec-31] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:47.307 [http-nio-8088-exec-31] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:47.307 [http-nio-8088-exec-31] INFO  c.c.l.MyServletRequestListener - request end
01:15:47.307 [http-nio-8088-exec-31] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:47.831 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=632, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:48.327 [http-nio-8088-exec-32] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:48.327 [http-nio-8088-exec-32] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/searchProductsByName
01:15:48.329 [http-nio-8088-exec-32] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：searchProductsByName，在该方法执行之前执行====
01:15:48.349 [http-nio-8088-exec-32] INFO  c.c.c.common.ProductController - 搜索商品名称: 
01:15:48.350 [http-nio-8088-exec-32] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:48.350 [http-nio-8088-exec-32] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:48.350 [http-nio-8088-exec-32] INFO  c.c.l.MyServletRequestListener - request end
01:15:48.351 [http-nio-8088-exec-32] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:49.176 [http-nio-8088-exec-33] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:49.176 [http-nio-8088-exec-33] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/searchProductsByName
01:15:49.177 [http-nio-8088-exec-33] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：searchProductsByName，在该方法执行之前执行====
01:15:49.199 [http-nio-8088-exec-33] INFO  c.c.c.common.ProductController - 搜索商品名称: 
01:15:49.200 [http-nio-8088-exec-33] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:49.200 [http-nio-8088-exec-33] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:49.200 [http-nio-8088-exec-33] INFO  c.c.l.MyServletRequestListener - request end
01:15:49.200 [http-nio-8088-exec-33] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:52.835 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=633, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:57.267 [http-nio-8088-exec-34] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:57.267 [http-nio-8088-exec-34] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:15:57.269 [http-nio-8088-exec-34] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:15:57.286 [http-nio-8088-exec-34] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=14, name=示例商品12, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:29, createTime=2024-07-13 15:51:29, isAvailable=true, isDeleted=false), Product(id=15, name=示例商品13, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:32, createTime=2024-07-13 15:51:32, isAvailable=true, isDeleted=false), Product(id=16, name=示例商品14, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:35, createTime=2024-07-13 15:51:35, isAvailable=true, isDeleted=false)]}
01:15:57.287 [http-nio-8088-exec-34] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:57.287 [http-nio-8088-exec-34] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:57.288 [http-nio-8088-exec-34] INFO  c.c.l.MyServletRequestListener - request end
01:15:57.288 [http-nio-8088-exec-34] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:15:57.841 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=634, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:15:58.964 [http-nio-8088-exec-35] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:15:58.964 [http-nio-8088-exec-35] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:15:58.966 [http-nio-8088-exec-35] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:15:58.984 [http-nio-8088-exec-35] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:15:58.986 [http-nio-8088-exec-35] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:15:58.986 [http-nio-8088-exec-35] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:15:58.986 [http-nio-8088-exec-35] INFO  c.c.l.MyServletRequestListener - request end
01:15:58.986 [http-nio-8088-exec-35] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:16:02.845 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=635, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:16:07.852 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=636, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:16:12.855 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=637, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:16:17.859 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=638, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:16:22.877 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=639, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:16:27.879 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=640, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:16:32.883 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=641, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:16:37.890 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=642, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:16:42.892 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=643, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:16:47.896 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=644, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:16:52.902 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=645, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:16:57.908 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=646, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:17:02.915 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=647, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:17:07.921 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=648, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:17:12.928 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=649, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:17:17.933 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=650, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:17:22.937 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=651, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:17:27.894 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:17:27.940 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=652, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:17:32.943 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=653, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:17:37.953 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:17:37.953 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=654, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:17:42.959 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=655, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:17:47.962 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=656, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:17:47.999 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:17:50.008 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:17:52.968 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=657, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:17:57.972 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=658, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:18:02.977 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=659, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:18:04.122 [http-nio-8088-exec-38] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:18:04.123 [http-nio-8088-exec-38] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:18:04.126 [http-nio-8088-exec-40] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:18:04.126 [http-nio-8088-exec-40] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:18:04.126 [http-nio-8088-exec-39] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:18:04.128 [http-nio-8088-exec-39] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:18:04.135 [http-nio-8088-exec-40] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:18:04.136 [http-nio-8088-exec-38] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:18:04.143 [http-nio-8088-exec-39] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:18:04.183 [http-nio-8088-exec-39] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:18:04.188 [http-nio-8088-exec-39] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:18:04.189 [http-nio-8088-exec-39] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:18:04.192 [http-nio-8088-exec-39] INFO  c.c.l.MyServletRequestListener - request end
01:18:04.192 [http-nio-8088-exec-39] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:18:04.189 [http-nio-8088-exec-40] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:18:04.197 [http-nio-8088-exec-40] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:18:04.198 [http-nio-8088-exec-40] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:18:04.198 [http-nio-8088-exec-40] INFO  c.c.l.MyServletRequestListener - request end
01:18:04.199 [http-nio-8088-exec-40] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:18:04.200 [http-nio-8088-exec-38] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:18:04.212 [http-nio-8088-exec-38] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:18:04.212 [http-nio-8088-exec-38] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:18:04.213 [http-nio-8088-exec-38] INFO  c.c.l.MyServletRequestListener - request end
01:18:04.213 [http-nio-8088-exec-38] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:18:07.990 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=660, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:18:13.041 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=661, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:18:18.047 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=662, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:18:23.053 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=663, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:18:28.058 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=664, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:18:33.062 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=665, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:18:38.069 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=666, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:18:43.072 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=667, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:18:48.076 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=668, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:18:51.796 [http-nio-8088-exec-41] INFO  c.c.l.MyServletRequestListener - session id为：null
01:18:51.796 [http-nio-8088-exec-41] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:18:51.796 [http-nio-8088-exec-42] INFO  c.c.l.MyServletRequestListener - session id为：null
01:18:51.797 [http-nio-8088-exec-42] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:18:51.799 [http-nio-8088-exec-41] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:18:51.802 [http-nio-8088-exec-42] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:18:51.810 [http-nio-8088-exec-41] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:18:51.811 [http-nio-8088-exec-41] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:18:51.811 [http-nio-8088-exec-41] INFO  c.c.l.MyServletRequestListener - request end
01:18:51.823 [http-nio-8088-exec-41] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:18:51.812 [http-nio-8088-exec-42] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:18:51.829 [http-nio-8088-exec-42] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:18:51.830 [http-nio-8088-exec-42] INFO  c.c.l.MyServletRequestListener - request end
01:18:51.830 [http-nio-8088-exec-42] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:18:51.830 [http-nio-8088-exec-42] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:18:51.831 [http-nio-8088-exec-42] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:18:51.831 [http-nio-8088-exec-43] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:18:51.832 [http-nio-8088-exec-43] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:18:51.839 [http-nio-8088-exec-44] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:18:51.839 [http-nio-8088-exec-44] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:18:51.845 [http-nio-8088-exec-43] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:18:51.845 [http-nio-8088-exec-42] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:18:51.860 [http-nio-8088-exec-44] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:18:51.893 [http-nio-8088-exec-44] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:18:51.893 [http-nio-8088-exec-43] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:18:51.893 [http-nio-8088-exec-44] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:18:51.893 [http-nio-8088-exec-44] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:18:51.894 [http-nio-8088-exec-44] INFO  c.c.l.MyServletRequestListener - request end
01:18:51.894 [http-nio-8088-exec-43] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:18:51.894 [http-nio-8088-exec-44] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:18:51.894 [http-nio-8088-exec-43] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:18:51.894 [http-nio-8088-exec-43] INFO  c.c.l.MyServletRequestListener - request end
01:18:51.894 [http-nio-8088-exec-43] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:18:51.898 [http-nio-8088-exec-42] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:18:51.899 [http-nio-8088-exec-42] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:18:51.899 [http-nio-8088-exec-42] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:18:51.899 [http-nio-8088-exec-42] INFO  c.c.l.MyServletRequestListener - request end
01:18:51.899 [http-nio-8088-exec-42] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:18:53.086 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=669, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:18:58.089 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=670, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:19:03.095 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=671, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:19:08.102 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=672, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:19:13.108 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=673, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:19:18.114 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=674, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:19:23.120 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=675, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:19:27.668 [http-nio-8088-exec-48] INFO  c.c.l.MyServletRequestListener - session id为：null
01:19:27.652 [http-nio-8088-exec-47] INFO  c.c.l.MyServletRequestListener - session id为：null
01:19:27.668 [http-nio-8088-exec-47] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:19:27.671 [http-nio-8088-exec-47] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:19:27.668 [http-nio-8088-exec-48] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:19:27.675 [http-nio-8088-exec-46] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:19:27.676 [http-nio-8088-exec-46] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:19:27.678 [http-nio-8088-exec-49] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:19:27.678 [http-nio-8088-exec-49] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:19:27.681 [http-nio-8088-exec-48] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:19:27.682 [http-nio-8088-exec-47] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:19:27.684 [http-nio-8088-exec-47] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:19:27.684 [http-nio-8088-exec-47] INFO  c.c.l.MyServletRequestListener - request end
01:19:27.684 [http-nio-8088-exec-48] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:19:27.684 [http-nio-8088-exec-48] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:19:27.684 [http-nio-8088-exec-48] INFO  c.c.l.MyServletRequestListener - request end
01:19:27.684 [http-nio-8088-exec-48] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:19:27.681 [http-nio-8088-exec-50] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:19:27.686 [http-nio-8088-exec-50] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:19:27.688 [http-nio-8088-exec-50] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:19:27.681 [http-nio-8088-exec-46] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:19:27.684 [http-nio-8088-exec-47] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:19:27.690 [http-nio-8088-exec-49] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:19:27.746 [http-nio-8088-exec-46] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:19:27.746 [http-nio-8088-exec-50] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:19:27.747 [http-nio-8088-exec-46] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:19:27.747 [http-nio-8088-exec-46] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:19:27.747 [http-nio-8088-exec-46] INFO  c.c.l.MyServletRequestListener - request end
01:19:27.747 [http-nio-8088-exec-46] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:19:27.747 [http-nio-8088-exec-50] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:19:27.747 [http-nio-8088-exec-50] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:19:27.747 [http-nio-8088-exec-50] INFO  c.c.l.MyServletRequestListener - request end
01:19:27.747 [http-nio-8088-exec-50] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:19:27.749 [http-nio-8088-exec-49] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:19:27.750 [http-nio-8088-exec-49] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:19:27.750 [http-nio-8088-exec-49] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:19:27.751 [http-nio-8088-exec-49] INFO  c.c.l.MyServletRequestListener - request end
01:19:27.751 [http-nio-8088-exec-49] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:19:28.121 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=676, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:19:33.126 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=677, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:19:38.131 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=678, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:19:43.134 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=679, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:19:48.140 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=680, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:19:49.883 [http-nio-8088-exec-52] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:19:49.886 [http-nio-8088-exec-52] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:19:49.888 [http-nio-8088-exec-53] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:19:49.888 [http-nio-8088-exec-53] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:19:49.889 [http-nio-8088-exec-51] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:19:49.889 [http-nio-8088-exec-51] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:19:49.889 [http-nio-8088-exec-52] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:19:49.890 [http-nio-8088-exec-53] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:19:49.892 [http-nio-8088-exec-51] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:19:49.922 [http-nio-8088-exec-51] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:19:49.923 [http-nio-8088-exec-53] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:19:49.923 [http-nio-8088-exec-51] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:19:49.923 [http-nio-8088-exec-51] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:19:49.924 [http-nio-8088-exec-53] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:19:49.924 [http-nio-8088-exec-53] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:19:49.924 [http-nio-8088-exec-53] INFO  c.c.l.MyServletRequestListener - request end
01:19:49.925 [http-nio-8088-exec-53] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:19:49.924 [http-nio-8088-exec-51] INFO  c.c.l.MyServletRequestListener - request end
01:19:49.925 [http-nio-8088-exec-51] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:19:49.946 [http-nio-8088-exec-52] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:19:49.947 [http-nio-8088-exec-52] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:19:49.947 [http-nio-8088-exec-52] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:19:49.947 [http-nio-8088-exec-52] INFO  c.c.l.MyServletRequestListener - request end
01:19:49.948 [http-nio-8088-exec-52] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:19:52.023 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:19:53.145 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=681, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:19:58.151 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=682, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:20:03.156 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=683, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:20:08.164 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=684, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:20:13.168 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=685, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:20:14.402 [http-nio-8088-exec-54] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:20:14.402 [http-nio-8088-exec-54] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:20:14.403 [http-nio-8088-exec-58] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:20:14.403 [http-nio-8088-exec-58] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:20:14.404 [http-nio-8088-exec-55] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:20:14.404 [http-nio-8088-exec-55] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:20:14.405 [http-nio-8088-exec-54] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:20:14.406 [http-nio-8088-exec-58] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:20:14.407 [http-nio-8088-exec-55] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:20:14.441 [http-nio-8088-exec-58] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:20:14.442 [http-nio-8088-exec-58] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:14.442 [http-nio-8088-exec-58] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:14.442 [http-nio-8088-exec-58] INFO  c.c.l.MyServletRequestListener - request end
01:20:14.442 [http-nio-8088-exec-58] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:14.451 [http-nio-8088-exec-55] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:20:14.451 [http-nio-8088-exec-54] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:20:14.453 [http-nio-8088-exec-55] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:14.453 [http-nio-8088-exec-55] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:14.455 [http-nio-8088-exec-55] INFO  c.c.l.MyServletRequestListener - request end
01:20:14.456 [http-nio-8088-exec-55] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:14.455 [http-nio-8088-exec-54] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:14.456 [http-nio-8088-exec-54] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:14.456 [http-nio-8088-exec-54] INFO  c.c.l.MyServletRequestListener - request end
01:20:14.457 [http-nio-8088-exec-54] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:18.179 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=686, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:20:18.611 [http-nio-8088-exec-57] INFO  c.c.l.MyServletRequestListener - session id为：null
01:20:18.611 [http-nio-8088-exec-57] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:20:18.615 [http-nio-8088-exec-57] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:20:18.619 [http-nio-8088-exec-56] INFO  c.c.l.MyServletRequestListener - session id为：null
01:20:18.620 [http-nio-8088-exec-56] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:20:18.620 [http-nio-8088-exec-57] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:18.621 [http-nio-8088-exec-57] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:18.621 [http-nio-8088-exec-57] INFO  c.c.l.MyServletRequestListener - request end
01:20:18.621 [http-nio-8088-exec-57] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:18.625 [http-nio-8088-exec-56] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:20:18.627 [http-nio-8088-exec-56] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:18.627 [http-nio-8088-exec-56] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:18.628 [http-nio-8088-exec-56] INFO  c.c.l.MyServletRequestListener - request end
01:20:18.628 [http-nio-8088-exec-56] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:18.631 [http-nio-8088-exec-59] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:20:18.631 [http-nio-8088-exec-59] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:20:18.631 [http-nio-8088-exec-60] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:20:18.632 [http-nio-8088-exec-61] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:20:18.632 [http-nio-8088-exec-61] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:20:18.632 [http-nio-8088-exec-60] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:20:18.641 [http-nio-8088-exec-59] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:20:18.641 [http-nio-8088-exec-61] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:20:18.641 [http-nio-8088-exec-60] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:20:18.678 [http-nio-8088-exec-60] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:20:18.681 [http-nio-8088-exec-60] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:18.682 [http-nio-8088-exec-60] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:18.687 [http-nio-8088-exec-60] INFO  c.c.l.MyServletRequestListener - request end
01:20:18.687 [http-nio-8088-exec-60] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:18.690 [http-nio-8088-exec-61] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:20:18.690 [http-nio-8088-exec-61] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:18.690 [http-nio-8088-exec-61] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:18.691 [http-nio-8088-exec-61] INFO  c.c.l.MyServletRequestListener - request end
01:20:18.691 [http-nio-8088-exec-61] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:18.698 [http-nio-8088-exec-59] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:20:18.699 [http-nio-8088-exec-59] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:18.700 [http-nio-8088-exec-59] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:18.700 [http-nio-8088-exec-59] INFO  c.c.l.MyServletRequestListener - request end
01:20:18.700 [http-nio-8088-exec-59] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:23.185 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=687, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:20:27.388 [http-nio-8088-exec-62] INFO  c.c.l.MyServletRequestListener - session id为：null
01:20:27.388 [http-nio-8088-exec-62] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:20:27.388 [http-nio-8088-exec-64] INFO  c.c.l.MyServletRequestListener - session id为：null
01:20:27.388 [http-nio-8088-exec-64] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:20:27.390 [http-nio-8088-exec-64] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:20:27.391 [http-nio-8088-exec-64] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:27.391 [http-nio-8088-exec-64] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:27.392 [http-nio-8088-exec-64] INFO  c.c.l.MyServletRequestListener - request end
01:20:27.392 [http-nio-8088-exec-64] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:27.392 [http-nio-8088-exec-64] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:20:27.392 [http-nio-8088-exec-64] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:20:27.395 [http-nio-8088-exec-64] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:20:27.390 [http-nio-8088-exec-62] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:20:27.407 [http-nio-8088-exec-62] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:27.407 [http-nio-8088-exec-62] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:27.408 [http-nio-8088-exec-62] INFO  c.c.l.MyServletRequestListener - request end
01:20:27.408 [http-nio-8088-exec-62] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:27.408 [http-nio-8088-exec-62] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:20:27.409 [http-nio-8088-exec-62] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:20:27.420 [http-nio-8088-exec-65] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:20:27.421 [http-nio-8088-exec-65] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:20:27.421 [http-nio-8088-exec-62] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:20:27.423 [http-nio-8088-exec-65] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:20:27.441 [http-nio-8088-exec-64] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:20:27.443 [http-nio-8088-exec-64] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:27.443 [http-nio-8088-exec-64] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:27.443 [http-nio-8088-exec-64] INFO  c.c.l.MyServletRequestListener - request end
01:20:27.444 [http-nio-8088-exec-64] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:27.451 [http-nio-8088-exec-65] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:20:27.453 [http-nio-8088-exec-65] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:27.453 [http-nio-8088-exec-65] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:27.453 [http-nio-8088-exec-65] INFO  c.c.l.MyServletRequestListener - request end
01:20:27.453 [http-nio-8088-exec-65] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:27.456 [http-nio-8088-exec-62] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:20:27.458 [http-nio-8088-exec-62] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:27.458 [http-nio-8088-exec-62] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:27.458 [http-nio-8088-exec-62] INFO  c.c.l.MyServletRequestListener - request end
01:20:27.458 [http-nio-8088-exec-62] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:28.190 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=688, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:20:33.192 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=689, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:20:37.886 [http-nio-8088-exec-70] INFO  c.c.l.MyServletRequestListener - session id为：null
01:20:37.887 [http-nio-8088-exec-70] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:20:37.890 [http-nio-8088-exec-70] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:20:37.902 [http-nio-8088-exec-69] INFO  c.c.l.MyServletRequestListener - session id为：null
01:20:37.902 [http-nio-8088-exec-70] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:37.904 [http-nio-8088-exec-69] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:20:37.904 [http-nio-8088-exec-70] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:37.904 [http-nio-8088-exec-70] INFO  c.c.l.MyServletRequestListener - request end
01:20:37.904 [http-nio-8088-exec-70] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:37.905 [http-nio-8088-exec-69] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:20:37.906 [http-nio-8088-exec-69] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:37.907 [http-nio-8088-exec-69] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:37.907 [http-nio-8088-exec-69] INFO  c.c.l.MyServletRequestListener - request end
01:20:37.907 [http-nio-8088-exec-69] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:37.914 [http-nio-8088-exec-68] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:20:37.914 [http-nio-8088-exec-68] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:20:37.918 [http-nio-8088-exec-67] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:20:37.918 [http-nio-8088-exec-67] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:20:37.919 [http-nio-8088-exec-71] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:20:37.920 [http-nio-8088-exec-71] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:20:37.920 [http-nio-8088-exec-67] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:20:37.921 [http-nio-8088-exec-68] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:20:37.924 [http-nio-8088-exec-71] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:20:37.944 [http-nio-8088-exec-71] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:20:37.945 [http-nio-8088-exec-71] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:37.945 [http-nio-8088-exec-71] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:37.945 [http-nio-8088-exec-71] INFO  c.c.l.MyServletRequestListener - request end
01:20:37.946 [http-nio-8088-exec-71] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:37.946 [http-nio-8088-exec-68] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:20:37.947 [http-nio-8088-exec-68] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:37.947 [http-nio-8088-exec-68] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:37.948 [http-nio-8088-exec-68] INFO  c.c.l.MyServletRequestListener - request end
01:20:37.948 [http-nio-8088-exec-68] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:37.963 [http-nio-8088-exec-67] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 16:44:53, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:20:37.965 [http-nio-8088-exec-67] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:20:37.965 [http-nio-8088-exec-67] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:20:37.966 [http-nio-8088-exec-67] INFO  c.c.l.MyServletRequestListener - request end
01:20:37.966 [http-nio-8088-exec-67] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:20:38.208 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=690, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:20:43.213 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=691, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:20:48.228 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=692, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:20:53.233 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=693, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:20:58.238 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=694, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:21:03.241 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=695, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:21:08.247 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=696, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:21:13.251 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=697, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:21:18.255 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=698, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:21:23.260 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=699, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:21:28.264 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=700, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:21:33.269 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=701, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:21:38.277 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=702, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:21:43.281 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=703, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:21:45.871 [http-nio-8088-exec-74] INFO  c.c.l.MyServletRequestListener - session id为：null
01:21:45.871 [http-nio-8088-exec-74] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:21:45.871 [http-nio-8088-exec-73] INFO  c.c.l.MyServletRequestListener - session id为：null
01:21:45.871 [http-nio-8088-exec-73] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:21:45.872 [http-nio-8088-exec-73] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:21:45.873 [http-nio-8088-exec-74] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:21:45.875 [http-nio-8088-exec-73] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:21:45.876 [http-nio-8088-exec-73] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:21:45.876 [http-nio-8088-exec-74] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:21:45.876 [http-nio-8088-exec-74] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:21:45.876 [http-nio-8088-exec-73] INFO  c.c.l.MyServletRequestListener - request end
01:21:45.876 [http-nio-8088-exec-74] INFO  c.c.l.MyServletRequestListener - request end
01:21:45.876 [http-nio-8088-exec-73] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:21:45.876 [http-nio-8088-exec-74] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:21:45.890 [http-nio-8088-exec-78] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:21:45.890 [http-nio-8088-exec-81] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:21:45.890 [http-nio-8088-exec-78] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:21:45.890 [http-nio-8088-exec-81] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:21:45.891 [http-nio-8088-exec-76] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:21:45.891 [http-nio-8088-exec-78] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:21:45.892 [http-nio-8088-exec-76] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:21:45.892 [http-nio-8088-exec-81] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:21:45.893 [http-nio-8088-exec-76] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:21:45.913 [http-nio-8088-exec-81] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:21:45.913 [http-nio-8088-exec-78] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:21:45.914 [http-nio-8088-exec-81] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:21:45.914 [http-nio-8088-exec-81] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:21:45.914 [http-nio-8088-exec-78] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:21:45.914 [http-nio-8088-exec-81] INFO  c.c.l.MyServletRequestListener - request end
01:21:45.914 [http-nio-8088-exec-81] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:21:45.914 [http-nio-8088-exec-78] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:21:45.919 [http-nio-8088-exec-78] INFO  c.c.l.MyServletRequestListener - request end
01:21:45.919 [http-nio-8088-exec-78] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:21:45.928 [http-nio-8088-exec-76] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 17:21:40, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:21:45.930 [http-nio-8088-exec-76] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:21:45.930 [http-nio-8088-exec-76] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:21:45.930 [http-nio-8088-exec-76] INFO  c.c.l.MyServletRequestListener - request end
01:21:45.931 [http-nio-8088-exec-76] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:21:48.286 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=704, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:21:51.262 [http-nio-8088-exec-79] INFO  c.c.l.MyServletRequestListener - session id为：null
01:21:51.263 [http-nio-8088-exec-79] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:21:51.262 [http-nio-8088-exec-77] INFO  c.c.l.MyServletRequestListener - session id为：null
01:21:51.264 [http-nio-8088-exec-77] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:21:51.266 [http-nio-8088-exec-77] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:21:51.269 [http-nio-8088-exec-79] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:21:51.270 [http-nio-8088-exec-77] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:21:51.270 [http-nio-8088-exec-79] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:21:51.270 [http-nio-8088-exec-79] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:21:51.270 [http-nio-8088-exec-79] INFO  c.c.l.MyServletRequestListener - request end
01:21:51.270 [http-nio-8088-exec-79] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:21:51.270 [http-nio-8088-exec-77] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:21:51.271 [http-nio-8088-exec-77] INFO  c.c.l.MyServletRequestListener - request end
01:21:51.271 [http-nio-8088-exec-77] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:21:51.274 [http-nio-8088-exec-80] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:21:51.275 [http-nio-8088-exec-80] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:21:51.275 [http-nio-8088-exec-83] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:21:51.275 [http-nio-8088-exec-83] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:21:51.275 [http-nio-8088-exec-82] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:21:51.275 [http-nio-8088-exec-82] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:21:51.276 [http-nio-8088-exec-83] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:21:51.276 [http-nio-8088-exec-82] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:21:51.284 [http-nio-8088-exec-80] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:21:51.292 [http-nio-8088-exec-82] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:21:51.292 [http-nio-8088-exec-83] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:21:51.293 [http-nio-8088-exec-83] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:21:51.293 [http-nio-8088-exec-83] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:21:51.294 [http-nio-8088-exec-83] INFO  c.c.l.MyServletRequestListener - request end
01:21:51.294 [http-nio-8088-exec-83] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:21:51.296 [http-nio-8088-exec-82] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:21:51.296 [http-nio-8088-exec-82] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:21:51.296 [http-nio-8088-exec-82] INFO  c.c.l.MyServletRequestListener - request end
01:21:51.296 [http-nio-8088-exec-82] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:21:51.310 [http-nio-8088-exec-80] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 17:21:40, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:21:51.312 [http-nio-8088-exec-80] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:21:51.312 [http-nio-8088-exec-80] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:21:51.312 [http-nio-8088-exec-80] INFO  c.c.l.MyServletRequestListener - request end
01:21:51.312 [http-nio-8088-exec-80] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:21:53.292 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=705, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:21:54.035 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:21:58.295 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=706, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:22:03.300 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=707, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:22:08.307 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=708, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:22:13.313 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=709, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:22:18.318 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=710, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:22:23.323 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=711, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:22:28.088 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:22:28.330 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=712, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:22:33.336 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=713, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:22:37.960 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:22:38.341 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=714, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:22:43.346 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=715, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:22:48.007 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:22:48.354 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=716, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:22:53.360 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=717, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:22:58.365 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=718, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:23:03.370 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=719, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:23:08.377 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=720, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:23:13.379 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=721, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:23:18.385 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=722, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:23:22.474 [http-nio-8088-exec-87] INFO  c.c.l.MyServletRequestListener - session id为：null
01:23:22.475 [http-nio-8088-exec-87] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:23:22.478 [http-nio-8088-exec-87] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:23:22.482 [http-nio-8088-exec-87] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:23:22.482 [http-nio-8088-exec-87] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:23:22.483 [http-nio-8088-exec-87] INFO  c.c.l.MyServletRequestListener - request end
01:23:22.483 [http-nio-8088-exec-87] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:23:23.388 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=723, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:23:23.703 [http-nio-8088-exec-88] INFO  c.c.l.MyServletRequestListener - session id为：null
01:23:23.703 [http-nio-8088-exec-88] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:23:23.704 [http-nio-8088-exec-88] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:23:23.707 [http-nio-8088-exec-88] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:23:23.707 [http-nio-8088-exec-88] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:23:23.707 [http-nio-8088-exec-88] INFO  c.c.l.MyServletRequestListener - request end
01:23:23.707 [http-nio-8088-exec-88] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:23:28.394 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=724, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:23:33.398 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=725, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:23:38.403 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=726, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:23:43.410 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=727, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:23:48.416 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=728, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:23:53.459 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=729, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:23:56.052 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:23:58.465 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=730, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:24:03.469 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=731, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:24:08.476 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=732, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:24:13.481 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=733, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:24:18.486 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=734, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:24:23.506 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=735, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:24:28.513 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=736, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:24:33.519 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=737, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:24:38.524 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=738, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:24:43.528 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=739, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:24:46.796 [http-nio-8088-exec-90] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:24:46.796 [http-nio-8088-exec-90] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:24:46.800 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:24:46.800 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:24:46.800 [http-nio-8088-exec-93] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:24:46.800 [http-nio-8088-exec-93] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:24:46.800 [http-nio-8088-exec-90] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:24:46.801 [http-nio-8088-exec-93] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:24:46.802 [http-nio-8088-exec-89] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:24:46.825 [http-nio-8088-exec-89] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:24:46.825 [http-nio-8088-exec-93] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:24:46.827 [http-nio-8088-exec-89] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:24:46.827 [http-nio-8088-exec-89] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:24:46.827 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - request end
01:24:46.827 [http-nio-8088-exec-89] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:24:46.827 [http-nio-8088-exec-93] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:24:46.828 [http-nio-8088-exec-93] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:24:46.828 [http-nio-8088-exec-93] INFO  c.c.l.MyServletRequestListener - request end
01:24:46.828 [http-nio-8088-exec-93] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:24:46.830 [http-nio-8088-exec-90] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 17:21:40, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:24:46.832 [http-nio-8088-exec-90] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:24:46.832 [http-nio-8088-exec-90] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:24:46.832 [http-nio-8088-exec-90] INFO  c.c.l.MyServletRequestListener - request end
01:24:46.832 [http-nio-8088-exec-90] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:24:48.535 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=740, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:24:50.139 [http-nio-8088-exec-92] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:24:50.139 [http-nio-8088-exec-92] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/deleteProduct/1
01:24:50.148 [http-nio-8088-exec-92] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：deleteProduct，在该方法执行之前执行====
01:24:50.168 [http-nio-8088-exec-92] INFO  c.c.c.common.ProductController - 删除商品: 商品ID=1
01:24:50.168 [http-nio-8088-exec-92] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:24:50.169 [http-nio-8088-exec-92] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:24:50.169 [http-nio-8088-exec-92] INFO  c.c.l.MyServletRequestListener - request end
01:24:50.169 [http-nio-8088-exec-92] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:24:50.185 [http-nio-8088-exec-91] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:24:50.185 [http-nio-8088-exec-91] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:24:50.186 [http-nio-8088-exec-91] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:24:50.230 [http-nio-8088-exec-91] INFO  c.c.c.common.ProductController - 分页查询商品: {total=12, products=[Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false), Product(id=14, name=示例商品12, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:29, createTime=2024-07-13 15:51:29, isAvailable=true, isDeleted=false)]}
01:24:50.232 [http-nio-8088-exec-91] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:24:50.232 [http-nio-8088-exec-91] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:24:50.232 [http-nio-8088-exec-91] INFO  c.c.l.MyServletRequestListener - request end
01:24:50.232 [http-nio-8088-exec-91] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:24:53.541 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=741, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:24:58.547 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=742, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:25:03.553 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=743, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:25:08.559 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=744, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:25:13.564 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=745, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:25:18.569 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=746, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:25:23.576 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=747, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:25:28.582 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=748, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:25:33.588 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=749, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:25:38.595 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=750, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:25:43.597 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=751, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:25:48.352 [http-nio-8088-exec-94] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:25:48.353 [http-nio-8088-exec-94] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:25:48.358 [http-nio-8088-exec-95] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:25:48.358 [http-nio-8088-exec-95] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:25:48.359 [http-nio-8088-exec-96] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:25:48.359 [http-nio-8088-exec-96] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:25:48.361 [http-nio-8088-exec-94] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:25:48.363 [http-nio-8088-exec-95] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:25:48.364 [http-nio-8088-exec-96] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:25:48.403 [http-nio-8088-exec-96] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:25:48.405 [http-nio-8088-exec-95] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:25:48.423 [http-nio-8088-exec-96] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:25:48.422 [http-nio-8088-exec-95] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:25:48.423 [http-nio-8088-exec-96] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:25:48.423 [http-nio-8088-exec-95] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:25:48.424 [http-nio-8088-exec-96] INFO  c.c.l.MyServletRequestListener - request end
01:25:48.425 [http-nio-8088-exec-96] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:25:48.424 [http-nio-8088-exec-95] INFO  c.c.l.MyServletRequestListener - request end
01:25:48.425 [http-nio-8088-exec-95] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:25:48.414 [http-nio-8088-exec-94] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 17:25:08, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:25:48.470 [http-nio-8088-exec-94] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:25:48.470 [http-nio-8088-exec-94] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:25:48.484 [http-nio-8088-exec-94] INFO  c.c.l.MyServletRequestListener - request end
01:25:48.484 [http-nio-8088-exec-94] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:25:48.613 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=752, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:25:53.618 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=753, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:25:58.071 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:25:58.623 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=754, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:26:03.648 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=755, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:26:08.654 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=756, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:26:10.788 [http-nio-8088-exec-97] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:10.788 [http-nio-8088-exec-97] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:26:10.790 [http-nio-8088-exec-97] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:26:10.810 [http-nio-8088-exec-97] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 17:25:08, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:26:10.811 [http-nio-8088-exec-97] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:10.811 [http-nio-8088-exec-97] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:10.812 [http-nio-8088-exec-97] INFO  c.c.l.MyServletRequestListener - request end
01:26:10.812 [http-nio-8088-exec-97] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:10.850 [http-nio-8088-exec-99] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:10.850 [http-nio-8088-exec-99] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:26:10.851 [http-nio-8088-exec-98] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:10.869 [http-nio-8088-exec-98] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:26:10.878 [http-nio-8088-exec-98] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:26:10.880 [http-nio-8088-exec-99] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:26:10.922 [http-nio-8088-exec-98] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:26:10.928 [http-nio-8088-exec-98] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:10.928 [http-nio-8088-exec-98] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:10.928 [http-nio-8088-exec-98] INFO  c.c.l.MyServletRequestListener - request end
01:26:10.928 [http-nio-8088-exec-98] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:10.934 [http-nio-8088-exec-99] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:26:10.935 [http-nio-8088-exec-99] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:10.935 [http-nio-8088-exec-99] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:10.936 [http-nio-8088-exec-99] INFO  c.c.l.MyServletRequestListener - request end
01:26:10.936 [http-nio-8088-exec-99] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:13.657 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=757, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:26:15.490 [http-nio-8088-exec-100] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:15.490 [http-nio-8088-exec-100] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:26:15.492 [http-nio-8088-exec-1] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:15.493 [http-nio-8088-exec-6] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:15.493 [http-nio-8088-exec-1] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:26:15.493 [http-nio-8088-exec-6] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:26:15.493 [http-nio-8088-exec-100] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:26:15.494 [http-nio-8088-exec-6] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:26:15.495 [http-nio-8088-exec-1] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:26:15.517 [http-nio-8088-exec-6] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:26:15.517 [http-nio-8088-exec-1] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:26:15.518 [http-nio-8088-exec-1] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:15.518 [http-nio-8088-exec-1] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:15.519 [http-nio-8088-exec-1] INFO  c.c.l.MyServletRequestListener - request end
01:26:15.519 [http-nio-8088-exec-1] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:15.519 [http-nio-8088-exec-6] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:15.519 [http-nio-8088-exec-6] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:15.520 [http-nio-8088-exec-6] INFO  c.c.l.MyServletRequestListener - request end
01:26:15.520 [http-nio-8088-exec-6] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:15.534 [http-nio-8088-exec-100] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 17:25:08, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:26:15.537 [http-nio-8088-exec-100] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:15.537 [http-nio-8088-exec-100] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:15.537 [http-nio-8088-exec-100] INFO  c.c.l.MyServletRequestListener - request end
01:26:15.537 [http-nio-8088-exec-100] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:18.753 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=758, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:26:18.765 [http-nio-8088-exec-2] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:18.766 [http-nio-8088-exec-2] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/deleteProduct/1
01:26:18.779 [http-nio-8088-exec-2] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：deleteProduct，在该方法执行之前执行====
01:26:18.803 [http-nio-8088-exec-2] INFO  c.c.c.common.ProductController - 删除商品: 商品ID=1
01:26:18.804 [http-nio-8088-exec-2] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:18.804 [http-nio-8088-exec-2] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:18.804 [http-nio-8088-exec-2] INFO  c.c.l.MyServletRequestListener - request end
01:26:18.804 [http-nio-8088-exec-2] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:18.815 [http-nio-8088-exec-3] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:18.815 [http-nio-8088-exec-3] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:26:18.820 [http-nio-8088-exec-3] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:26:18.849 [http-nio-8088-exec-3] INFO  c.c.c.common.ProductController - 分页查询商品: {total=12, products=[Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false), Product(id=14, name=示例商品12, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:29, createTime=2024-07-13 15:51:29, isAvailable=true, isDeleted=false)]}
01:26:18.850 [http-nio-8088-exec-3] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:18.850 [http-nio-8088-exec-3] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:18.850 [http-nio-8088-exec-3] INFO  c.c.l.MyServletRequestListener - request end
01:26:18.850 [http-nio-8088-exec-3] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:22.465 [http-nio-8088-exec-5] INFO  c.c.l.MyServletRequestListener - session id为：null
01:26:22.466 [http-nio-8088-exec-5] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:26:22.470 [http-nio-8088-exec-5] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:26:22.474 [http-nio-8088-exec-4] INFO  c.c.l.MyServletRequestListener - session id为：null
01:26:22.474 [http-nio-8088-exec-4] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:26:22.476 [http-nio-8088-exec-5] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:22.476 [http-nio-8088-exec-5] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:22.477 [http-nio-8088-exec-5] INFO  c.c.l.MyServletRequestListener - request end
01:26:22.477 [http-nio-8088-exec-5] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:22.486 [http-nio-8088-exec-4] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:26:22.489 [http-nio-8088-exec-4] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:22.489 [http-nio-8088-exec-4] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:22.490 [http-nio-8088-exec-4] INFO  c.c.l.MyServletRequestListener - request end
01:26:22.490 [http-nio-8088-exec-4] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:22.490 [http-nio-8088-exec-4] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:22.490 [http-nio-8088-exec-4] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:26:22.493 [http-nio-8088-exec-8] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:22.497 [http-nio-8088-exec-8] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:26:22.493 [http-nio-8088-exec-9] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:22.500 [http-nio-8088-exec-9] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:26:22.502 [http-nio-8088-exec-4] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:26:22.502 [http-nio-8088-exec-8] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:26:22.506 [http-nio-8088-exec-9] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:26:22.551 [http-nio-8088-exec-4] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:26:22.552 [http-nio-8088-exec-9] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:26:22.552 [http-nio-8088-exec-4] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:22.552 [http-nio-8088-exec-4] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:22.553 [http-nio-8088-exec-4] INFO  c.c.l.MyServletRequestListener - request end
01:26:22.553 [http-nio-8088-exec-4] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:22.553 [http-nio-8088-exec-9] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:22.553 [http-nio-8088-exec-9] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:22.553 [http-nio-8088-exec-9] INFO  c.c.l.MyServletRequestListener - request end
01:26:22.553 [http-nio-8088-exec-9] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:22.560 [http-nio-8088-exec-8] INFO  c.c.c.common.ProductController - 分页查询商品: {total=12, products=[Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 16:40:35, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false), Product(id=14, name=示例商品12, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:29, createTime=2024-07-13 15:51:29, isAvailable=true, isDeleted=false)]}
01:26:22.562 [http-nio-8088-exec-8] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:22.562 [http-nio-8088-exec-8] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:22.562 [http-nio-8088-exec-8] INFO  c.c.l.MyServletRequestListener - request end
01:26:22.562 [http-nio-8088-exec-8] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:23.421 [http-nio-8088-exec-10] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:23.421 [http-nio-8088-exec-10] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/deleteProduct/2
01:26:23.429 [http-nio-8088-exec-10] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：deleteProduct，在该方法执行之前执行====
01:26:23.453 [http-nio-8088-exec-10] INFO  c.c.c.common.ProductController - 删除商品: 商品ID=2
01:26:23.454 [http-nio-8088-exec-10] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:23.455 [http-nio-8088-exec-10] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:23.456 [http-nio-8088-exec-10] INFO  c.c.l.MyServletRequestListener - request end
01:26:23.456 [http-nio-8088-exec-10] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:23.473 [http-nio-8088-exec-7] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:23.473 [http-nio-8088-exec-7] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:26:23.475 [http-nio-8088-exec-7] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:26:23.493 [http-nio-8088-exec-7] INFO  c.c.c.common.ProductController - 分页查询商品: {total=11, products=[Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false), Product(id=14, name=示例商品12, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:29, createTime=2024-07-13 15:51:29, isAvailable=true, isDeleted=false), Product(id=15, name=示例商品13, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:32, createTime=2024-07-13 15:51:32, isAvailable=true, isDeleted=false)]}
01:26:23.495 [http-nio-8088-exec-7] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:23.495 [http-nio-8088-exec-7] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:23.496 [http-nio-8088-exec-7] INFO  c.c.l.MyServletRequestListener - request end
01:26:23.496 [http-nio-8088-exec-7] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:23.758 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=759, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:26:28.765 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=760, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:26:33.771 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=761, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:26:38.776 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=762, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:26:43.779 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=763, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:26:48.783 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=764, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:26:51.541 [http-nio-8088-exec-13] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:51.541 [http-nio-8088-exec-13] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:26:51.543 [http-nio-8088-exec-12] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:51.543 [http-nio-8088-exec-15] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:26:51.544 [http-nio-8088-exec-15] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:26:51.544 [http-nio-8088-exec-13] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:26:51.543 [http-nio-8088-exec-12] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:26:51.547 [http-nio-8088-exec-15] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:26:51.547 [http-nio-8088-exec-12] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:26:51.587 [http-nio-8088-exec-15] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:26:51.588 [http-nio-8088-exec-15] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:51.589 [http-nio-8088-exec-15] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:51.587 [http-nio-8088-exec-12] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:26:51.589 [http-nio-8088-exec-15] INFO  c.c.l.MyServletRequestListener - request end
01:26:51.589 [http-nio-8088-exec-15] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:51.597 [http-nio-8088-exec-12] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:51.608 [http-nio-8088-exec-12] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:51.608 [http-nio-8088-exec-12] INFO  c.c.l.MyServletRequestListener - request end
01:26:51.608 [http-nio-8088-exec-12] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:51.607 [http-nio-8088-exec-13] INFO  c.c.c.common.ProductController - 分页查询商品: {total=11, products=[Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false), Product(id=14, name=示例商品12, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:29, createTime=2024-07-13 15:51:29, isAvailable=true, isDeleted=false), Product(id=15, name=示例商品13, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:32, createTime=2024-07-13 15:51:32, isAvailable=true, isDeleted=false)]}
01:26:51.621 [http-nio-8088-exec-13] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:26:51.621 [http-nio-8088-exec-13] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:26:51.622 [http-nio-8088-exec-13] INFO  c.c.l.MyServletRequestListener - request end
01:26:51.622 [http-nio-8088-exec-13] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:26:53.788 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=765, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:26:58.792 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=766, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:27:03.802 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=767, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:27:04.052 [http-nio-8088-exec-16] INFO  c.c.l.MyServletRequestListener - session id为：null
01:27:04.053 [http-nio-8088-exec-16] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:27:04.053 [http-nio-8088-exec-16] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:27:04.056 [http-nio-8088-exec-16] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:27:04.056 [http-nio-8088-exec-16] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:27:04.056 [http-nio-8088-exec-16] INFO  c.c.l.MyServletRequestListener - request end
01:27:04.056 [http-nio-8088-exec-16] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:27:04.064 [http-nio-8088-exec-14] INFO  c.c.l.MyServletRequestListener - session id为：null
01:27:04.065 [http-nio-8088-exec-14] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/getLatestImage
01:27:04.066 [http-nio-8088-exec-14] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getLatestImage，在该方法执行之前执行====
01:27:04.068 [http-nio-8088-exec-14] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:27:04.068 [http-nio-8088-exec-14] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:27:04.069 [http-nio-8088-exec-14] INFO  c.c.l.MyServletRequestListener - request end
01:27:04.070 [http-nio-8088-exec-14] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:27:04.073 [http-nio-8088-exec-17] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:27:04.074 [http-nio-8088-exec-17] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/products/getProductsPaged
01:27:04.074 [http-nio-8088-exec-18] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:27:04.074 [http-nio-8088-exec-18] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/productCategories/getAllProductCategories
01:27:04.076 [http-nio-8088-exec-18] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllProductCategories，在该方法执行之前执行====
01:27:04.079 [http-nio-8088-exec-17] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getProductsPaged，在该方法执行之前执行====
01:27:04.086 [http-nio-8088-exec-20] INFO  c.c.l.MyServletRequestListener - session id为：C437BC4C1CD0C21C8B8CB3D7201BD62C
01:27:04.086 [http-nio-8088-exec-20] INFO  c.c.l.MyServletRequestListener - request url为：http://127.0.0.1:8088/v1/brands/getAllBrands
01:27:04.088 [http-nio-8088-exec-20] INFO  c.c.c.Interceptor.MyInterceptor - ====拦截到了方法：getAllBrands，在该方法执行之前执行====
01:27:04.203 [http-nio-8088-exec-20] INFO  c.c.controller.admin.BrandController - 获取所有品牌信息成功
01:27:04.175 [http-nio-8088-exec-18] INFO  c.c.c.c.ProductCategoryController - 获取所有商品分类信息: [ProductCategory(id=1, name=分类1, description=这是一个示例分类1的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=4, name=分类4, description=这是一个示例分类4的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=5, name=分类5, description=这是一个示例分类5的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=false, isDeleted=false), ProductCategory(id=6, name=分类666, description=这是一个示例分类6666的描述。, updateTime=2024-07-02 09:59:05, createTime=2024-07-02 09:59:05, isEnabled=false, isDeleted=false), ProductCategory(id=7, name=分类7, description=这是一个示例分类7的描述。, updateTime=2024-07-02 09:52:29, createTime=2024-07-02 09:52:29, isEnabled=true, isDeleted=false), ProductCategory(id=8, name=分类8, description=这是一个示例分类8的描述。, updateTime=2024-07-02 09:57:31, createTime=2024-07-02 09:57:31, isEnabled=true, isDeleted=false)]
01:27:04.214 [http-nio-8088-exec-20] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:27:04.219 [http-nio-8088-exec-20] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:27:04.220 [http-nio-8088-exec-20] INFO  c.c.l.MyServletRequestListener - request end
01:27:04.220 [http-nio-8088-exec-20] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:27:04.225 [http-nio-8088-exec-18] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:27:04.231 [http-nio-8088-exec-18] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:27:04.232 [http-nio-8088-exec-18] INFO  c.c.l.MyServletRequestListener - request end
01:27:04.232 [http-nio-8088-exec-18] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:27:04.203 [http-nio-8088-exec-17] INFO  c.c.c.common.ProductController - 分页查询商品: {total=13, products=[Product(id=1, name=美大光华标准集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164034_美大风华标准集成灶.jpg, detailImages=null, description=美大光华标准集成灶 很好用。。。。。。。。。。。。1111, salePrice=1000.0, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=1, updateTime=2024-07-13 17:27:00, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=2, name=美大M908标准, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164226_美大M908标准.png, detailImages=null, description=美大M908标准 很好用。。。。。。。。。。。。, salePrice=992.99, costPrice=592.99, stockQuantity=1002, brand=示例品牌2, categoryId=2, updateTime=2024-07-13 17:27:00, createTime=2024-07-02 09:52:13, isAvailable=false, isDeleted=false), Product(id=3, name=美大M902, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164308_美大M902.png, detailImages=null, description=这是一个示例商品的描述333。, salePrice=993.99, costPrice=593.99, stockQuantity=1002, brand=示例品牌3, categoryId=3, updateTime=2024-07-07 08:43:17, createTime=2024-07-02 10:03:15, isAvailable=false, isDeleted=false), Product(id=5, name=美大M908, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164321_美大M908.png, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:43:40, createTime=2024-07-02 09:59:58, isAvailable=true, isDeleted=false), Product(id=6, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=7, name=美大风尚标准库集成灶, coverImage=http://127.0.0.1:8088/v1/getLatestImage?fileName=admin12_20240707164426_美大风尚标准库集成灶.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-07 08:44:40, createTime=2024-07-02 10:00:45, isAvailable=true, isDeleted=false), Product(id=10, name=示例商品8, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:13, createTime=2024-07-13 15:51:13, isAvailable=true, isDeleted=false), Product(id=11, name=示例商品9, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:18, createTime=2024-07-13 15:51:18, isAvailable=true, isDeleted=false), Product(id=12, name=示例商品10, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 16:40:35, createTime=2024-07-13 15:51:21, isAvailable=true, isDeleted=false), Product(id=13, name=示例商品11, coverImage=http://example.com/images/cover.jpg, detailImages=null, description=这是一个示例商品的描述。, salePrice=99.99, costPrice=59.99, stockQuantity=100, brand=示例品牌, categoryId=4, updateTime=2024-07-13 15:51:25, createTime=2024-07-13 15:51:25, isAvailable=true, isDeleted=false)]}
01:27:04.271 [http-nio-8088-exec-17] INFO  c.c.c.Interceptor.MyInterceptor - 执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染
01:27:04.280 [http-nio-8088-exec-17] INFO  c.c.c.Interceptor.MyInterceptor - 整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
01:27:04.308 [http-nio-8088-exec-17] INFO  c.c.l.MyServletRequestListener - request end
01:27:04.330 [http-nio-8088-exec-17] INFO  c.c.l.MyServletRequestListener - request域中保存的name值为：测试自定义事件监听器
01:27:08.810 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=768, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:27:13.814 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=769, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:27:18.824 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=770, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:27:23.830 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=771, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:27:27.999 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:27:28.835 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=772, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:27:33.838 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=773, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:27:38.050 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:27:38.844 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=774, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:27:43.849 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=775, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:27:48.106 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:27:48.855 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=776, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:27:53.861 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=777, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:27:58.866 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=778, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:28:00.180 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:28:03.871 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=779, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:28:08.876 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=780, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:28:13.878 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=781, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:28:18.881 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=782, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:28:23.889 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=783, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:28:28.897 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=784, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:28:35.145 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=785, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:28:40.508 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=786, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:28:45.520 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=787, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:28:50.528 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=788, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:28:55.537 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=789, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:29:00.541 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=790, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:29:05.550 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=791, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:29:10.561 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=792, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:29:15.564 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=793, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:29:20.573 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=794, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:36:42.998 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=795, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:36:48.005 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=796, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:36:53.012 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=797, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:36:53.958 [HikariPool-5 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-5 - Thread starvation or clock leap detected (housekeeper delta=7m46s621ms).
01:36:58.035 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=798, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:37:03.046 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=799, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:37:08.123 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=800, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:37:13.139 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=801, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:37:18.149 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=802, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:37:18.882 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:37:23.156 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=803, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:37:28.176 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=804, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:37:50.713 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=805, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:37:55.725 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=806, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:38:00.734 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=807, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:38:05.740 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=808, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:38:10.285 [HikariPool-5 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-5 - Thread starvation or clock leap detected (housekeeper delta=46s255ms).
01:38:10.763 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=809, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:38:15.769 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=810, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:38:18.284 [Thread-97] INFO  o.a.coyote.http11.Http11NioProtocol - Pausing ProtocolHandler ["http-nio-8088"]
01:38:18.284 [Thread-97] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
01:38:18.286 [Thread-97] INFO  o.a.c.c.C.[Tomcat-2].[localhost].[/] - Destroying Spring FrameworkServlet 'dispatcherServlet'
01:38:18.296 [Thread-97] WARN  o.a.c.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [HikariPool-5 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.1/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.1/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.1/java.lang.Thread.run(Thread.java:833)
01:38:18.298 [Thread-97] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8088"]
01:38:18.315 [Thread-97] INFO  o.a.coyote.http11.Http11NioProtocol - Destroying ProtocolHandler ["http-nio-8088"]
01:38:18.331 [Thread-97] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-5 - Shutdown initiated...
01:38:18.342 [Thread-97] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-5 - Shutdown completed.
01:38:18.979 [restartedMain] INFO  com.cows.Application - Starting Application using Java 17.0.1 with PID 2954 (/Users/liyinchi/workspace/java/company_official_website_server/target/classes started by liyinchi in /Users/liyinchi/workspace/java/company_official_website_server)
01:38:18.979 [restartedMain] INFO  com.cows.Application - The following 1 profile is active: "dev"
01:38:19.634 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8088"]
01:38:19.634 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
01:38:19.634 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.12]
01:38:19.652 [restartedMain] INFO  o.a.c.c.C.[Tomcat-2].[localhost].[/] - Initializing Spring embedded WebApplicationContext
01:38:19.832 [restartedMain] ERROR c.b.m.core.MybatisConfiguration - mapper[com.cows.mapper.AdminMapper.findAdminByUserName] is ignored, because it exists, maybe from xml file
01:38:20.309 [restartedMain] INFO  c.c.f.a.s.a.SpringValueProcessor - Monitoring key: microservice.url.orderUrl, beanName: jsonController, field: com.cows.controller.common.JsonController.orderUrl
01:38:20.331 [restartedMain] INFO  c.c.f.a.s.a.SpringValueProcessor - Monitoring key: wechat.appid, beanName: wechatService, field: com.cows.service.WechatService.appId
01:38:20.331 [restartedMain] INFO  c.c.f.a.s.a.SpringValueProcessor - Monitoring key: wechat.secret, beanName: wechatService, field: com.cows.service.WechatService.secret
01:38:20.331 [restartedMain] INFO  c.c.f.a.s.a.SpringValueProcessor - Monitoring key: wechat.redirect.uri, beanName: wechatService, field: com.cows.service.WechatService.redirectUri
01:38:20.339 [restartedMain] INFO  c.c.f.a.s.a.SpringValueProcessor - Monitoring key: wechat.appid, beanName: loginController, field: com.cows.controller.common.LoginController.appid
01:38:20.339 [restartedMain] INFO  c.c.f.a.s.a.SpringValueProcessor - Monitoring key: wechat.redirect.uri, beanName: loginController, field: com.cows.controller.common.LoginController.redirectUri
01:38:20.418 [restartedMain] INFO  com.cows.service.RedisService - redis port: 6379
01:38:20.731 [restartedMain] INFO  c.c.f.a.s.a.SpringValueProcessor - Monitoring key: spring.mvc.servlet.path, beanName: swaggerWelcome, field: org.springdoc.webmvc.ui.SwaggerWelcomeWebMvc.mvcServletPath
01:38:21.164 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8088"]
01:38:21.191 [restartedMain] INFO  com.cows.Application - Started Application in 2.259 seconds (process running for 14615.023)
01:38:26.193 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=0, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:38:31.198 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=1, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:38:36.200 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=2, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:38:41.209 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=3, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:38:46.221 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=4, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:38:51.231 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=5, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:38:56.240 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=6, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:39:01.249 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=7, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:39:06.258 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=8, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:54:34.852 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=9, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:54:39.862 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=10, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:54:46.150 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=11, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:54:51.485 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=12, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:55:21.090 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=13, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:55:23.932 [Apollo-RemoteConfigLongPollService-1] WARN  c.c.f.a.i.RemoteConfigLongPollService - Long polling failed, will retry in 120 seconds. appId: platform, cluster: default, namespaces: application+message+sensitive-config, long polling url: null, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:55:26.828 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=14, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:55:56.377 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=15, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:56:01.389 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=16, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:56:06.400 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=17, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:56:34.993 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=18, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:56:35.717 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:56:40.003 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=19, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:57:09.886 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:57:09.893 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=20, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:57:15.626 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=21, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:57:18.096 [Catalina-utility-1] INFO  c.c.listener.MyHttpSessionListener - 用户下线了
01:57:18.460 [Apollo-RemoteConfigRepository-1] WARN  c.c.f.a.i.AbstractConfigRepository - Sync config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, reason: Get config services failed from http://meta.apollo.xxx.cn/services/config?appId=platform&ip=192.168.31.81 [Cause: Could not complete get operation [Cause: meta.apollo.xxx.cn]]
01:57:45.218 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=22, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
01:57:50.948 [org.springframework.jms.JmsListenerEndpointContainer#0-1] ERROR o.s.j.l.DefaultMessageListenerContainer - Could not refresh JMS Connection for destination 'activemq.queue' - retrying using FixedBackOff{interval=5000, currentAttempts=23, maxAttempts=unlimited}. Cause: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused
